# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class ArchivingGetStatisticsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            _from = schemas.DateTimeSchema
            to = schemas.DateTimeSchema
            total_records = schemas.IntSchema
        
            @staticmethod
            def statistic_by_file_extension() -> typing.Type['ArchivingGetStatisticsResponseStatisticByFileExtension']:
                return ArchivingGetStatisticsResponseStatisticByFileExtension
        
            @staticmethod
            def statistic_by_file_status() -> typing.Type['ArchivingGetStatisticsResponseStatisticByFileStatus']:
                return ArchivingGetStatisticsResponseStatisticByFileStatus
            __annotations__ = {
                "from": _from,
                "to": to,
                "total_records": total_records,
                "statistic_by_file_extension": statistic_by_file_extension,
                "statistic_by_file_status": statistic_by_file_status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_records"]) -> MetaOapg.properties.total_records: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistic_by_file_extension"]) -> 'ArchivingGetStatisticsResponseStatisticByFileExtension': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistic_by_file_status"]) -> 'ArchivingGetStatisticsResponseStatisticByFileStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["from", "to", "total_records", "statistic_by_file_extension", "statistic_by_file_status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union[MetaOapg.properties.to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_records"]) -> typing.Union[MetaOapg.properties.total_records, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistic_by_file_extension"]) -> typing.Union['ArchivingGetStatisticsResponseStatisticByFileExtension', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistic_by_file_status"]) -> typing.Union['ArchivingGetStatisticsResponseStatisticByFileStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["from", "to", "total_records", "statistic_by_file_extension", "statistic_by_file_status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        to: typing.Union[MetaOapg.properties.to, str, datetime, schemas.Unset] = schemas.unset,
        total_records: typing.Union[MetaOapg.properties.total_records, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        statistic_by_file_extension: typing.Union['ArchivingGetStatisticsResponseStatisticByFileExtension', schemas.Unset] = schemas.unset,
        statistic_by_file_status: typing.Union['ArchivingGetStatisticsResponseStatisticByFileStatus', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ArchivingGetStatisticsResponse':
        return super().__new__(
            cls,
            *args,
            to=to,
            total_records=total_records,
            statistic_by_file_extension=statistic_by_file_extension,
            statistic_by_file_status=statistic_by_file_status,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.archiving_get_statistics_response_statistic_by_file_extension import ArchivingGetStatisticsResponseStatisticByFileExtension
from zoom_meeting_python_sdk.model.archiving_get_statistics_response_statistic_by_file_status import ArchivingGetStatisticsResponseStatisticByFileStatus
