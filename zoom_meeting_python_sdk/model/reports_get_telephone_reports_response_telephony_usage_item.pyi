# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class ReportsGetTelephoneReportsResponseTelephonyUsageItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            call_in_number = schemas.StrSchema
            country_name = schemas.StrSchema
            dept = schemas.StrSchema
            duration = schemas.IntSchema
            end_time = schemas.DateTimeSchema
            host_email = schemas.StrSchema
            host_id = schemas.StrSchema
            host_name = schemas.StrSchema
            meeting_id = schemas.Int64Schema
            meeting_type = schemas.StrSchema
            phone_number = schemas.StrSchema
            rate = schemas.NumberSchema
            signaled_number = schemas.StrSchema
            start_time = schemas.DateTimeSchema
            total = schemas.NumberSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TOLLFREE(cls):
                    return cls("toll-free")
                
                @schemas.classproperty
                def CALLOUT(cls):
                    return cls("call-out")
                
                @schemas.classproperty
                def CALLIN(cls):
                    return cls("call-in")
                
                @schemas.classproperty
                def US_TOLLNUMBER(cls):
                    return cls("US toll-number")
                
                @schemas.classproperty
                def GLOBAL_TOLLNUMBER(cls):
                    return cls("global toll-number")
                
                @schemas.classproperty
                def PREMIUM(cls):
                    return cls("premium")
                
                @schemas.classproperty
                def PREMIUM_CALLIN(cls):
                    return cls("premium call-in")
                
                @schemas.classproperty
                def TOLL(cls):
                    return cls("Toll")
            uuid = schemas.StrSchema
            __annotations__ = {
                "call_in_number": call_in_number,
                "country_name": country_name,
                "dept": dept,
                "duration": duration,
                "end_time": end_time,
                "host_email": host_email,
                "host_id": host_id,
                "host_name": host_name,
                "meeting_id": meeting_id,
                "meeting_type": meeting_type,
                "phone_number": phone_number,
                "rate": rate,
                "signaled_number": signaled_number,
                "start_time": start_time,
                "total": total,
                "type": type,
                "uuid": uuid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["call_in_number"]) -> MetaOapg.properties.call_in_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_name"]) -> MetaOapg.properties.country_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dept"]) -> MetaOapg.properties.dept: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host_email"]) -> MetaOapg.properties.host_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host_id"]) -> MetaOapg.properties.host_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host_name"]) -> MetaOapg.properties.host_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meeting_id"]) -> MetaOapg.properties.meeting_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meeting_type"]) -> MetaOapg.properties.meeting_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_number"]) -> MetaOapg.properties.phone_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signaled_number"]) -> MetaOapg.properties.signaled_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["call_in_number", "country_name", "dept", "duration", "end_time", "host_email", "host_id", "host_name", "meeting_id", "meeting_type", "phone_number", "rate", "signaled_number", "start_time", "total", "type", "uuid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["call_in_number"]) -> typing.Union[MetaOapg.properties.call_in_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_name"]) -> typing.Union[MetaOapg.properties.country_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dept"]) -> typing.Union[MetaOapg.properties.dept, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> typing.Union[MetaOapg.properties.end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host_email"]) -> typing.Union[MetaOapg.properties.host_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host_id"]) -> typing.Union[MetaOapg.properties.host_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host_name"]) -> typing.Union[MetaOapg.properties.host_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meeting_id"]) -> typing.Union[MetaOapg.properties.meeting_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meeting_type"]) -> typing.Union[MetaOapg.properties.meeting_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_number"]) -> typing.Union[MetaOapg.properties.phone_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signaled_number"]) -> typing.Union[MetaOapg.properties.signaled_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["call_in_number", "country_name", "dept", "duration", "end_time", "host_email", "host_id", "host_name", "meeting_id", "meeting_type", "phone_number", "rate", "signaled_number", "start_time", "total", "type", "uuid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        call_in_number: typing.Union[MetaOapg.properties.call_in_number, str, schemas.Unset] = schemas.unset,
        country_name: typing.Union[MetaOapg.properties.country_name, str, schemas.Unset] = schemas.unset,
        dept: typing.Union[MetaOapg.properties.dept, str, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        end_time: typing.Union[MetaOapg.properties.end_time, str, datetime, schemas.Unset] = schemas.unset,
        host_email: typing.Union[MetaOapg.properties.host_email, str, schemas.Unset] = schemas.unset,
        host_id: typing.Union[MetaOapg.properties.host_id, str, schemas.Unset] = schemas.unset,
        host_name: typing.Union[MetaOapg.properties.host_name, str, schemas.Unset] = schemas.unset,
        meeting_id: typing.Union[MetaOapg.properties.meeting_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        meeting_type: typing.Union[MetaOapg.properties.meeting_type, str, schemas.Unset] = schemas.unset,
        phone_number: typing.Union[MetaOapg.properties.phone_number, str, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        signaled_number: typing.Union[MetaOapg.properties.signaled_number, str, schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, str, datetime, schemas.Unset] = schemas.unset,
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportsGetTelephoneReportsResponseTelephonyUsageItem':
        return super().__new__(
            cls,
            *args,
            call_in_number=call_in_number,
            country_name=country_name,
            dept=dept,
            duration=duration,
            end_time=end_time,
            host_email=host_email,
            host_id=host_id,
            host_name=host_name,
            meeting_id=meeting_id,
            meeting_type=meeting_type,
            phone_number=phone_number,
            rate=rate,
            signaled_number=signaled_number,
            start_time=start_time,
            total=total,
            type=type,
            uuid=uuid,
            _configuration=_configuration,
            **kwargs,
        )
