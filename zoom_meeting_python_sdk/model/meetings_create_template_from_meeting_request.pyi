# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class MeetingsCreateTemplateFromMeetingRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            meeting_id = schemas.Int64Schema
            name = schemas.StrSchema
            save_recurrence = schemas.BoolSchema
            overwrite = schemas.BoolSchema
            __annotations__ = {
                "meeting_id": meeting_id,
                "name": name,
                "save_recurrence": save_recurrence,
                "overwrite": overwrite,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meeting_id"]) -> MetaOapg.properties.meeting_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["save_recurrence"]) -> MetaOapg.properties.save_recurrence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overwrite"]) -> MetaOapg.properties.overwrite: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["meeting_id", "name", "save_recurrence", "overwrite", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meeting_id"]) -> typing.Union[MetaOapg.properties.meeting_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["save_recurrence"]) -> typing.Union[MetaOapg.properties.save_recurrence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overwrite"]) -> typing.Union[MetaOapg.properties.overwrite, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["meeting_id", "name", "save_recurrence", "overwrite", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        meeting_id: typing.Union[MetaOapg.properties.meeting_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        save_recurrence: typing.Union[MetaOapg.properties.save_recurrence, bool, schemas.Unset] = schemas.unset,
        overwrite: typing.Union[MetaOapg.properties.overwrite, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MeetingsCreateTemplateFromMeetingRequest':
        return super().__new__(
            cls,
            *args,
            meeting_id=meeting_id,
            name=name,
            save_recurrence=save_recurrence,
            overwrite=overwrite,
            _configuration=_configuration,
            **kwargs,
        )
