# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class ArchivingGetStatisticsResponseStatisticByFileExtension(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Statistics about archive files, by file extension.
    """


    class MetaOapg:
        
        class properties:
            mp4_file_count = schemas.IntSchema
            m4a_file_count = schemas.IntSchema
            txt_file_count = schemas.IntSchema
            json_file_count = schemas.IntSchema
            vtt_file_count = schemas.IntSchema
            __annotations__ = {
                "mp4_file_count": mp4_file_count,
                "m4a_file_count": m4a_file_count,
                "txt_file_count": txt_file_count,
                "json_file_count": json_file_count,
                "vtt_file_count": vtt_file_count,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mp4_file_count"]) -> MetaOapg.properties.mp4_file_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["m4a_file_count"]) -> MetaOapg.properties.m4a_file_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["txt_file_count"]) -> MetaOapg.properties.txt_file_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["json_file_count"]) -> MetaOapg.properties.json_file_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vtt_file_count"]) -> MetaOapg.properties.vtt_file_count: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mp4_file_count", "m4a_file_count", "txt_file_count", "json_file_count", "vtt_file_count", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mp4_file_count"]) -> typing.Union[MetaOapg.properties.mp4_file_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["m4a_file_count"]) -> typing.Union[MetaOapg.properties.m4a_file_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["txt_file_count"]) -> typing.Union[MetaOapg.properties.txt_file_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["json_file_count"]) -> typing.Union[MetaOapg.properties.json_file_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vtt_file_count"]) -> typing.Union[MetaOapg.properties.vtt_file_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mp4_file_count", "m4a_file_count", "txt_file_count", "json_file_count", "vtt_file_count", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        mp4_file_count: typing.Union[MetaOapg.properties.mp4_file_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        m4a_file_count: typing.Union[MetaOapg.properties.m4a_file_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        txt_file_count: typing.Union[MetaOapg.properties.txt_file_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        json_file_count: typing.Union[MetaOapg.properties.json_file_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        vtt_file_count: typing.Union[MetaOapg.properties.vtt_file_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ArchivingGetStatisticsResponseStatisticByFileExtension':
        return super().__new__(
            cls,
            *args,
            mp4_file_count=mp4_file_count,
            m4a_file_count=m4a_file_count,
            txt_file_count=txt_file_count,
            json_file_count=json_file_count,
            vtt_file_count=vtt_file_count,
            _configuration=_configuration,
            **kwargs,
        )
