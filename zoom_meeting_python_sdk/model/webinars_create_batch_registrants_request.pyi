# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class WebinarsCreateBatchRegistrantsRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            auto_approve = schemas.BoolSchema
        
            @staticmethod
            def registrants() -> typing.Type['WebinarsCreateBatchRegistrantsRequestRegistrants']:
                return WebinarsCreateBatchRegistrantsRequestRegistrants
            __annotations__ = {
                "auto_approve": auto_approve,
                "registrants": registrants,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_approve"]) -> MetaOapg.properties.auto_approve: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrants"]) -> 'WebinarsCreateBatchRegistrantsRequestRegistrants': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["auto_approve", "registrants", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_approve"]) -> typing.Union[MetaOapg.properties.auto_approve, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrants"]) -> typing.Union['WebinarsCreateBatchRegistrantsRequestRegistrants', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["auto_approve", "registrants", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        auto_approve: typing.Union[MetaOapg.properties.auto_approve, bool, schemas.Unset] = schemas.unset,
        registrants: typing.Union['WebinarsCreateBatchRegistrantsRequestRegistrants', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarsCreateBatchRegistrantsRequest':
        return super().__new__(
            cls,
            *args,
            auto_approve=auto_approve,
            registrants=registrants,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.webinars_create_batch_registrants_request_registrants import WebinarsCreateBatchRegistrantsRequestRegistrants
