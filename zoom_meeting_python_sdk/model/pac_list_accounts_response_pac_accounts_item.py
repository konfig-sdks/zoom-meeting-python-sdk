# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class PacListAccountsResponsePacAccountsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            conference_id = schemas.Int64Schema
        
            @staticmethod
            def dedicated_dial_in_number() -> typing.Type['PacListAccountsResponsePacAccountsItemDedicatedDialInNumber']:
                return PacListAccountsResponsePacAccountsItemDedicatedDialInNumber
        
            @staticmethod
            def global_dial_in_numbers() -> typing.Type['PacListAccountsResponsePacAccountsItemGlobalDialInNumbers']:
                return PacListAccountsResponsePacAccountsItemGlobalDialInNumbers
            
            
            class listen_only_password(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 6
            
            
            class participant_password(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 6
            __annotations__ = {
                "conference_id": conference_id,
                "dedicated_dial_in_number": dedicated_dial_in_number,
                "global_dial_in_numbers": global_dial_in_numbers,
                "listen_only_password": listen_only_password,
                "participant_password": participant_password,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conference_id"]) -> MetaOapg.properties.conference_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dedicated_dial_in_number"]) -> 'PacListAccountsResponsePacAccountsItemDedicatedDialInNumber': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["global_dial_in_numbers"]) -> 'PacListAccountsResponsePacAccountsItemGlobalDialInNumbers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["listen_only_password"]) -> MetaOapg.properties.listen_only_password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["participant_password"]) -> MetaOapg.properties.participant_password: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["conference_id", "dedicated_dial_in_number", "global_dial_in_numbers", "listen_only_password", "participant_password", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conference_id"]) -> typing.Union[MetaOapg.properties.conference_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dedicated_dial_in_number"]) -> typing.Union['PacListAccountsResponsePacAccountsItemDedicatedDialInNumber', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["global_dial_in_numbers"]) -> typing.Union['PacListAccountsResponsePacAccountsItemGlobalDialInNumbers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["listen_only_password"]) -> typing.Union[MetaOapg.properties.listen_only_password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["participant_password"]) -> typing.Union[MetaOapg.properties.participant_password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["conference_id", "dedicated_dial_in_number", "global_dial_in_numbers", "listen_only_password", "participant_password", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        conference_id: typing.Union[MetaOapg.properties.conference_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dedicated_dial_in_number: typing.Union['PacListAccountsResponsePacAccountsItemDedicatedDialInNumber', schemas.Unset] = schemas.unset,
        global_dial_in_numbers: typing.Union['PacListAccountsResponsePacAccountsItemGlobalDialInNumbers', schemas.Unset] = schemas.unset,
        listen_only_password: typing.Union[MetaOapg.properties.listen_only_password, str, schemas.Unset] = schemas.unset,
        participant_password: typing.Union[MetaOapg.properties.participant_password, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PacListAccountsResponsePacAccountsItem':
        return super().__new__(
            cls,
            *args,
            conference_id=conference_id,
            dedicated_dial_in_number=dedicated_dial_in_number,
            global_dial_in_numbers=global_dial_in_numbers,
            listen_only_password=listen_only_password,
            participant_password=participant_password,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.pac_list_accounts_response_pac_accounts_item_dedicated_dial_in_number import PacListAccountsResponsePacAccountsItemDedicatedDialInNumber
from zoom_meeting_python_sdk.model.pac_list_accounts_response_pac_accounts_item_global_dial_in_numbers import PacListAccountsResponsePacAccountsItemGlobalDialInNumbers
