# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class MeetingsListRegistrationQuestionsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Meeting Registrant Questions
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def custom_questions() -> typing.Type['MeetingsListRegistrationQuestionsResponseCustomQuestions']:
                return MeetingsListRegistrationQuestionsResponseCustomQuestions
        
            @staticmethod
            def questions() -> typing.Type['MeetingsListRegistrationQuestionsResponseQuestions']:
                return MeetingsListRegistrationQuestionsResponseQuestions
            __annotations__ = {
                "custom_questions": custom_questions,
                "questions": questions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_questions"]) -> 'MeetingsListRegistrationQuestionsResponseCustomQuestions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["questions"]) -> 'MeetingsListRegistrationQuestionsResponseQuestions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["custom_questions", "questions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_questions"]) -> typing.Union['MeetingsListRegistrationQuestionsResponseCustomQuestions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["questions"]) -> typing.Union['MeetingsListRegistrationQuestionsResponseQuestions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["custom_questions", "questions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        custom_questions: typing.Union['MeetingsListRegistrationQuestionsResponseCustomQuestions', schemas.Unset] = schemas.unset,
        questions: typing.Union['MeetingsListRegistrationQuestionsResponseQuestions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MeetingsListRegistrationQuestionsResponse':
        return super().__new__(
            cls,
            *args,
            custom_questions=custom_questions,
            questions=questions,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.meetings_list_registration_questions_response_custom_questions import MeetingsListRegistrationQuestionsResponseCustomQuestions
from zoom_meeting_python_sdk.model.meetings_list_registration_questions_response_questions import MeetingsListRegistrationQuestionsResponseQuestions
