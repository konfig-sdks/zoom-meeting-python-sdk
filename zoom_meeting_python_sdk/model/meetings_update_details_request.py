# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class MeetingsUpdateDetailsRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Meeting object.
    """


    class MetaOapg:
        
        class properties:
            
            
            class agenda(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2000
            duration = schemas.IntSchema
            
            
            class password(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 10
            pre_schedule = schemas.BoolSchema
            schedule_for = schemas.StrSchema
        
            @staticmethod
            def recurrence() -> typing.Type['MeetingsUpdateDetailsRequestRecurrence']:
                return MeetingsUpdateDetailsRequestRecurrence
        
            @staticmethod
            def settings() -> typing.Type['MeetingsUpdateDetailsRequestSettings']:
                return MeetingsUpdateDetailsRequestSettings
            start_time = schemas.DateTimeSchema
            template_id = schemas.StrSchema
            timezone = schemas.StrSchema
            
            
            class topic(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 200
        
            @staticmethod
            def tracking_fields() -> typing.Type['MeetingsUpdateDetailsRequestTrackingFields']:
                return MeetingsUpdateDetailsRequestTrackingFields
            
            
            class type(
                schemas.EnumBase,
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        1: "POSITIVE_1",
                        2: "POSITIVE_2",
                        3: "POSITIVE_3",
                        8: "POSITIVE_8",
                    }
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_8(cls):
                    return cls(8)
            __annotations__ = {
                "agenda": agenda,
                "duration": duration,
                "password": password,
                "pre_schedule": pre_schedule,
                "schedule_for": schedule_for,
                "recurrence": recurrence,
                "settings": settings,
                "start_time": start_time,
                "template_id": template_id,
                "timezone": timezone,
                "topic": topic,
                "tracking_fields": tracking_fields,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["agenda"]) -> MetaOapg.properties.agenda: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pre_schedule"]) -> MetaOapg.properties.pre_schedule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule_for"]) -> MetaOapg.properties.schedule_for: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurrence"]) -> 'MeetingsUpdateDetailsRequestRecurrence': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> 'MeetingsUpdateDetailsRequestSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template_id"]) -> MetaOapg.properties.template_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_fields"]) -> 'MeetingsUpdateDetailsRequestTrackingFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["agenda", "duration", "password", "pre_schedule", "schedule_for", "recurrence", "settings", "start_time", "template_id", "timezone", "topic", "tracking_fields", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["agenda"]) -> typing.Union[MetaOapg.properties.agenda, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pre_schedule"]) -> typing.Union[MetaOapg.properties.pre_schedule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule_for"]) -> typing.Union[MetaOapg.properties.schedule_for, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurrence"]) -> typing.Union['MeetingsUpdateDetailsRequestRecurrence', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> typing.Union['MeetingsUpdateDetailsRequestSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template_id"]) -> typing.Union[MetaOapg.properties.template_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic"]) -> typing.Union[MetaOapg.properties.topic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_fields"]) -> typing.Union['MeetingsUpdateDetailsRequestTrackingFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["agenda", "duration", "password", "pre_schedule", "schedule_for", "recurrence", "settings", "start_time", "template_id", "timezone", "topic", "tracking_fields", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        agenda: typing.Union[MetaOapg.properties.agenda, str, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        pre_schedule: typing.Union[MetaOapg.properties.pre_schedule, bool, schemas.Unset] = schemas.unset,
        schedule_for: typing.Union[MetaOapg.properties.schedule_for, str, schemas.Unset] = schemas.unset,
        recurrence: typing.Union['MeetingsUpdateDetailsRequestRecurrence', schemas.Unset] = schemas.unset,
        settings: typing.Union['MeetingsUpdateDetailsRequestSettings', schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, str, datetime, schemas.Unset] = schemas.unset,
        template_id: typing.Union[MetaOapg.properties.template_id, str, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        topic: typing.Union[MetaOapg.properties.topic, str, schemas.Unset] = schemas.unset,
        tracking_fields: typing.Union['MeetingsUpdateDetailsRequestTrackingFields', schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MeetingsUpdateDetailsRequest':
        return super().__new__(
            cls,
            *args,
            agenda=agenda,
            duration=duration,
            password=password,
            pre_schedule=pre_schedule,
            schedule_for=schedule_for,
            recurrence=recurrence,
            settings=settings,
            start_time=start_time,
            template_id=template_id,
            timezone=timezone,
            topic=topic,
            tracking_fields=tracking_fields,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.meetings_update_details_request_recurrence import MeetingsUpdateDetailsRequestRecurrence
from zoom_meeting_python_sdk.model.meetings_update_details_request_settings import MeetingsUpdateDetailsRequestSettings
from zoom_meeting_python_sdk.model.meetings_update_details_request_tracking_fields import MeetingsUpdateDetailsRequestTrackingFields
