# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class CloudRecordingGetMeetingRecordingsResponseRecordingFilesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Recording file object.
    """


    class MetaOapg:
        
        class properties:
            deleted_time = schemas.StrSchema
            download_url = schemas.StrSchema
            file_path = schemas.StrSchema
            file_size = schemas.NumberSchema
            
            
            class file_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "MP4": "MP4",
                        "M4A": "M4A",
                        "CHAT": "CHAT",
                        "TRANSCRIPT": "TRANSCRIPT",
                        "CSV": "CSV",
                        "TB": "TB",
                        "CC": "CC",
                        "CHAT_MESSAGE": "CHAT_MESSAGE",
                        "SUMMARY": "SUMMARY",
                    }
                
                @schemas.classproperty
                def MP4(cls):
                    return cls("MP4")
                
                @schemas.classproperty
                def M4A(cls):
                    return cls("M4A")
                
                @schemas.classproperty
                def CHAT(cls):
                    return cls("CHAT")
                
                @schemas.classproperty
                def TRANSCRIPT(cls):
                    return cls("TRANSCRIPT")
                
                @schemas.classproperty
                def CSV(cls):
                    return cls("CSV")
                
                @schemas.classproperty
                def TB(cls):
                    return cls("TB")
                
                @schemas.classproperty
                def CC(cls):
                    return cls("CC")
                
                @schemas.classproperty
                def CHAT_MESSAGE(cls):
                    return cls("CHAT_MESSAGE")
                
                @schemas.classproperty
                def SUMMARY(cls):
                    return cls("SUMMARY")
            
            
            class file_extension(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "MP4": "MP4",
                        "M4A": "M4A",
                        "TXT": "TXT",
                        "VTT": "VTT",
                        "CSV": "CSV",
                        "JSON": "JSON",
                        "JPG": "JPG",
                    }
                
                @schemas.classproperty
                def MP4(cls):
                    return cls("MP4")
                
                @schemas.classproperty
                def M4A(cls):
                    return cls("M4A")
                
                @schemas.classproperty
                def TXT(cls):
                    return cls("TXT")
                
                @schemas.classproperty
                def VTT(cls):
                    return cls("VTT")
                
                @schemas.classproperty
                def CSV(cls):
                    return cls("CSV")
                
                @schemas.classproperty
                def JSON(cls):
                    return cls("JSON")
                
                @schemas.classproperty
                def JPG(cls):
                    return cls("JPG")
            id = schemas.StrSchema
            meeting_id = schemas.StrSchema
            play_url = schemas.StrSchema
            recording_end = schemas.StrSchema
            recording_start = schemas.StrSchema
            
            
            class recording_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "shared_screen_with_speaker_view(CC)": "SHARED_SCREEN_WITH_SPEAKER_VIEWCC",
                        "shared_screen_with_speaker_view": "SHARED_SCREEN_WITH_SPEAKER_VIEW",
                        "shared_screen_with_gallery_view": "SHARED_SCREEN_WITH_GALLERY_VIEW",
                        "active_speaker": "ACTIVE_SPEAKER",
                        "gallery_view": "GALLERY_VIEW",
                        "shared_screen": "SHARED_SCREEN",
                        "audio_only": "AUDIO_ONLY",
                        "audio_transcript": "AUDIO_TRANSCRIPT",
                        "chat_file": "CHAT_FILE",
                        "poll": "POLL",
                        "host_video": "HOST_VIDEO",
                        "closed_caption": "CLOSED_CAPTION",
                        "timeline": "TIMELINE",
                        "thumbnail": "THUMBNAIL",
                        "audio_interpretation": "AUDIO_INTERPRETATION",
                        "summary": "SUMMARY",
                        "summary_next_steps": "SUMMARY_NEXT_STEPS",
                        "summary_smart_chapters": "SUMMARY_SMART_CHAPTERS",
                        "sign_interpretation": "SIGN_INTERPRETATION",
                        "production_studio": "PRODUCTION_STUDIO",
                    }
                
                @schemas.classproperty
                def SHARED_SCREEN_WITH_SPEAKER_VIEWCC(cls):
                    return cls("shared_screen_with_speaker_view(CC)")
                
                @schemas.classproperty
                def SHARED_SCREEN_WITH_SPEAKER_VIEW(cls):
                    return cls("shared_screen_with_speaker_view")
                
                @schemas.classproperty
                def SHARED_SCREEN_WITH_GALLERY_VIEW(cls):
                    return cls("shared_screen_with_gallery_view")
                
                @schemas.classproperty
                def ACTIVE_SPEAKER(cls):
                    return cls("active_speaker")
                
                @schemas.classproperty
                def GALLERY_VIEW(cls):
                    return cls("gallery_view")
                
                @schemas.classproperty
                def SHARED_SCREEN(cls):
                    return cls("shared_screen")
                
                @schemas.classproperty
                def AUDIO_ONLY(cls):
                    return cls("audio_only")
                
                @schemas.classproperty
                def AUDIO_TRANSCRIPT(cls):
                    return cls("audio_transcript")
                
                @schemas.classproperty
                def CHAT_FILE(cls):
                    return cls("chat_file")
                
                @schemas.classproperty
                def POLL(cls):
                    return cls("poll")
                
                @schemas.classproperty
                def HOST_VIDEO(cls):
                    return cls("host_video")
                
                @schemas.classproperty
                def CLOSED_CAPTION(cls):
                    return cls("closed_caption")
                
                @schemas.classproperty
                def TIMELINE(cls):
                    return cls("timeline")
                
                @schemas.classproperty
                def THUMBNAIL(cls):
                    return cls("thumbnail")
                
                @schemas.classproperty
                def AUDIO_INTERPRETATION(cls):
                    return cls("audio_interpretation")
                
                @schemas.classproperty
                def SUMMARY(cls):
                    return cls("summary")
                
                @schemas.classproperty
                def SUMMARY_NEXT_STEPS(cls):
                    return cls("summary_next_steps")
                
                @schemas.classproperty
                def SUMMARY_SMART_CHAPTERS(cls):
                    return cls("summary_smart_chapters")
                
                @schemas.classproperty
                def SIGN_INTERPRETATION(cls):
                    return cls("sign_interpretation")
                
                @schemas.classproperty
                def PRODUCTION_STUDIO(cls):
                    return cls("production_studio")
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "completed": "COMPLETED",
                    }
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("completed")
            __annotations__ = {
                "deleted_time": deleted_time,
                "download_url": download_url,
                "file_path": file_path,
                "file_size": file_size,
                "file_type": file_type,
                "file_extension": file_extension,
                "id": id,
                "meeting_id": meeting_id,
                "play_url": play_url,
                "recording_end": recording_end,
                "recording_start": recording_start,
                "recording_type": recording_type,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted_time"]) -> MetaOapg.properties.deleted_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download_url"]) -> MetaOapg.properties.download_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_path"]) -> MetaOapg.properties.file_path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_size"]) -> MetaOapg.properties.file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_type"]) -> MetaOapg.properties.file_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_extension"]) -> MetaOapg.properties.file_extension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meeting_id"]) -> MetaOapg.properties.meeting_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["play_url"]) -> MetaOapg.properties.play_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording_end"]) -> MetaOapg.properties.recording_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording_start"]) -> MetaOapg.properties.recording_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording_type"]) -> MetaOapg.properties.recording_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["deleted_time", "download_url", "file_path", "file_size", "file_type", "file_extension", "id", "meeting_id", "play_url", "recording_end", "recording_start", "recording_type", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted_time"]) -> typing.Union[MetaOapg.properties.deleted_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download_url"]) -> typing.Union[MetaOapg.properties.download_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_path"]) -> typing.Union[MetaOapg.properties.file_path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_size"]) -> typing.Union[MetaOapg.properties.file_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_type"]) -> typing.Union[MetaOapg.properties.file_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_extension"]) -> typing.Union[MetaOapg.properties.file_extension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meeting_id"]) -> typing.Union[MetaOapg.properties.meeting_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["play_url"]) -> typing.Union[MetaOapg.properties.play_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording_end"]) -> typing.Union[MetaOapg.properties.recording_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording_start"]) -> typing.Union[MetaOapg.properties.recording_start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording_type"]) -> typing.Union[MetaOapg.properties.recording_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deleted_time", "download_url", "file_path", "file_size", "file_type", "file_extension", "id", "meeting_id", "play_url", "recording_end", "recording_start", "recording_type", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        deleted_time: typing.Union[MetaOapg.properties.deleted_time, str, schemas.Unset] = schemas.unset,
        download_url: typing.Union[MetaOapg.properties.download_url, str, schemas.Unset] = schemas.unset,
        file_path: typing.Union[MetaOapg.properties.file_path, str, schemas.Unset] = schemas.unset,
        file_size: typing.Union[MetaOapg.properties.file_size, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        file_type: typing.Union[MetaOapg.properties.file_type, str, schemas.Unset] = schemas.unset,
        file_extension: typing.Union[MetaOapg.properties.file_extension, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        meeting_id: typing.Union[MetaOapg.properties.meeting_id, str, schemas.Unset] = schemas.unset,
        play_url: typing.Union[MetaOapg.properties.play_url, str, schemas.Unset] = schemas.unset,
        recording_end: typing.Union[MetaOapg.properties.recording_end, str, schemas.Unset] = schemas.unset,
        recording_start: typing.Union[MetaOapg.properties.recording_start, str, schemas.Unset] = schemas.unset,
        recording_type: typing.Union[MetaOapg.properties.recording_type, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CloudRecordingGetMeetingRecordingsResponseRecordingFilesItem':
        return super().__new__(
            cls,
            *args,
            deleted_time=deleted_time,
            download_url=download_url,
            file_path=file_path,
            file_size=file_size,
            file_type=file_type,
            file_extension=file_extension,
            id=id,
            meeting_id=meeting_id,
            play_url=play_url,
            recording_end=recording_end,
            recording_start=recording_start,
            recording_type=recording_type,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
