# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class CloudRecordingGetSettingsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class approval_type(
                schemas.EnumBase,
                schemas.IntSchema
            ):
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls(0)
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
            authentication_domains = schemas.StrSchema
            authentication_option = schemas.StrSchema
            on_demand = schemas.BoolSchema
            
            
            class password(
                schemas.StrSchema
            ):
                pass
            recording_authentication = schemas.BoolSchema
            send_email_to_host = schemas.BoolSchema
            
            
            class share_recording(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PUBLICLY(cls):
                    return cls("publicly")
                
                @schemas.classproperty
                def INTERNALLY(cls):
                    return cls("internally")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("none")
            show_social_share_buttons = schemas.BoolSchema
            topic = schemas.StrSchema
            viewer_download = schemas.BoolSchema
            __annotations__ = {
                "approval_type": approval_type,
                "authentication_domains": authentication_domains,
                "authentication_option": authentication_option,
                "on_demand": on_demand,
                "password": password,
                "recording_authentication": recording_authentication,
                "send_email_to_host": send_email_to_host,
                "share_recording": share_recording,
                "show_social_share_buttons": show_social_share_buttons,
                "topic": topic,
                "viewer_download": viewer_download,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approval_type"]) -> MetaOapg.properties.approval_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication_domains"]) -> MetaOapg.properties.authentication_domains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication_option"]) -> MetaOapg.properties.authentication_option: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["on_demand"]) -> MetaOapg.properties.on_demand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording_authentication"]) -> MetaOapg.properties.recording_authentication: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["send_email_to_host"]) -> MetaOapg.properties.send_email_to_host: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["share_recording"]) -> MetaOapg.properties.share_recording: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_social_share_buttons"]) -> MetaOapg.properties.show_social_share_buttons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewer_download"]) -> MetaOapg.properties.viewer_download: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["approval_type", "authentication_domains", "authentication_option", "on_demand", "password", "recording_authentication", "send_email_to_host", "share_recording", "show_social_share_buttons", "topic", "viewer_download", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approval_type"]) -> typing.Union[MetaOapg.properties.approval_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication_domains"]) -> typing.Union[MetaOapg.properties.authentication_domains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication_option"]) -> typing.Union[MetaOapg.properties.authentication_option, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["on_demand"]) -> typing.Union[MetaOapg.properties.on_demand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording_authentication"]) -> typing.Union[MetaOapg.properties.recording_authentication, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["send_email_to_host"]) -> typing.Union[MetaOapg.properties.send_email_to_host, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["share_recording"]) -> typing.Union[MetaOapg.properties.share_recording, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_social_share_buttons"]) -> typing.Union[MetaOapg.properties.show_social_share_buttons, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic"]) -> typing.Union[MetaOapg.properties.topic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewer_download"]) -> typing.Union[MetaOapg.properties.viewer_download, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["approval_type", "authentication_domains", "authentication_option", "on_demand", "password", "recording_authentication", "send_email_to_host", "share_recording", "show_social_share_buttons", "topic", "viewer_download", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        approval_type: typing.Union[MetaOapg.properties.approval_type, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        authentication_domains: typing.Union[MetaOapg.properties.authentication_domains, str, schemas.Unset] = schemas.unset,
        authentication_option: typing.Union[MetaOapg.properties.authentication_option, str, schemas.Unset] = schemas.unset,
        on_demand: typing.Union[MetaOapg.properties.on_demand, bool, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        recording_authentication: typing.Union[MetaOapg.properties.recording_authentication, bool, schemas.Unset] = schemas.unset,
        send_email_to_host: typing.Union[MetaOapg.properties.send_email_to_host, bool, schemas.Unset] = schemas.unset,
        share_recording: typing.Union[MetaOapg.properties.share_recording, str, schemas.Unset] = schemas.unset,
        show_social_share_buttons: typing.Union[MetaOapg.properties.show_social_share_buttons, bool, schemas.Unset] = schemas.unset,
        topic: typing.Union[MetaOapg.properties.topic, str, schemas.Unset] = schemas.unset,
        viewer_download: typing.Union[MetaOapg.properties.viewer_download, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CloudRecordingGetSettingsResponse':
        return super().__new__(
            cls,
            *args,
            approval_type=approval_type,
            authentication_domains=authentication_domains,
            authentication_option=authentication_option,
            on_demand=on_demand,
            password=password,
            recording_authentication=recording_authentication,
            send_email_to_host=send_email_to_host,
            share_recording=share_recording,
            show_social_share_buttons=show_social_share_buttons,
            topic=topic,
            viewer_download=viewer_download,
            _configuration=_configuration,
            **kwargs,
        )
