# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class CloudRecordingGetMeetingRecordingsResponseParticipantAudioFilesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The recording file object.
    """


    class MetaOapg:
        
        class properties:
            download_url = schemas.StrSchema
            file_name = schemas.StrSchema
            file_path = schemas.StrSchema
            file_size = schemas.NumberSchema
            file_type = schemas.StrSchema
            id = schemas.StrSchema
            play_url = schemas.StrSchema
            recording_end = schemas.DateTimeSchema
            recording_start = schemas.DateTimeSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "completed": "COMPLETED",
                    }
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("completed")
            __annotations__ = {
                "download_url": download_url,
                "file_name": file_name,
                "file_path": file_path,
                "file_size": file_size,
                "file_type": file_type,
                "id": id,
                "play_url": play_url,
                "recording_end": recording_end,
                "recording_start": recording_start,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download_url"]) -> MetaOapg.properties.download_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_name"]) -> MetaOapg.properties.file_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_path"]) -> MetaOapg.properties.file_path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_size"]) -> MetaOapg.properties.file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_type"]) -> MetaOapg.properties.file_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["play_url"]) -> MetaOapg.properties.play_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording_end"]) -> MetaOapg.properties.recording_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording_start"]) -> MetaOapg.properties.recording_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["download_url", "file_name", "file_path", "file_size", "file_type", "id", "play_url", "recording_end", "recording_start", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download_url"]) -> typing.Union[MetaOapg.properties.download_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_name"]) -> typing.Union[MetaOapg.properties.file_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_path"]) -> typing.Union[MetaOapg.properties.file_path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_size"]) -> typing.Union[MetaOapg.properties.file_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_type"]) -> typing.Union[MetaOapg.properties.file_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["play_url"]) -> typing.Union[MetaOapg.properties.play_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording_end"]) -> typing.Union[MetaOapg.properties.recording_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording_start"]) -> typing.Union[MetaOapg.properties.recording_start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["download_url", "file_name", "file_path", "file_size", "file_type", "id", "play_url", "recording_end", "recording_start", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        download_url: typing.Union[MetaOapg.properties.download_url, str, schemas.Unset] = schemas.unset,
        file_name: typing.Union[MetaOapg.properties.file_name, str, schemas.Unset] = schemas.unset,
        file_path: typing.Union[MetaOapg.properties.file_path, str, schemas.Unset] = schemas.unset,
        file_size: typing.Union[MetaOapg.properties.file_size, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        file_type: typing.Union[MetaOapg.properties.file_type, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        play_url: typing.Union[MetaOapg.properties.play_url, str, schemas.Unset] = schemas.unset,
        recording_end: typing.Union[MetaOapg.properties.recording_end, str, datetime, schemas.Unset] = schemas.unset,
        recording_start: typing.Union[MetaOapg.properties.recording_start, str, datetime, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CloudRecordingGetMeetingRecordingsResponseParticipantAudioFilesItem':
        return super().__new__(
            cls,
            *args,
            download_url=download_url,
            file_name=file_name,
            file_path=file_path,
            file_size=file_size,
            file_type=file_type,
            id=id,
            play_url=play_url,
            recording_end=recording_end,
            recording_start=recording_start,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
