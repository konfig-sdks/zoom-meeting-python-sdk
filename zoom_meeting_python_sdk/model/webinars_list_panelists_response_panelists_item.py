# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class WebinarsListPanelistsResponsePanelistsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Panelist base object.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            email = schemas.StrSchema
            name = schemas.StrSchema
            join_url = schemas.StrSchema
            virtual_background_id = schemas.StrSchema
            name_tag_id = schemas.StrSchema
            name_tag_name = schemas.StrSchema
            name_tag_pronouns = schemas.StrSchema
            name_tag_description = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "email": email,
                "name": name,
                "join_url": join_url,
                "virtual_background_id": virtual_background_id,
                "name_tag_id": name_tag_id,
                "name_tag_name": name_tag_name,
                "name_tag_pronouns": name_tag_pronouns,
                "name_tag_description": name_tag_description,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["join_url"]) -> MetaOapg.properties.join_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["virtual_background_id"]) -> MetaOapg.properties.virtual_background_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_tag_id"]) -> MetaOapg.properties.name_tag_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_tag_name"]) -> MetaOapg.properties.name_tag_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_tag_pronouns"]) -> MetaOapg.properties.name_tag_pronouns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_tag_description"]) -> MetaOapg.properties.name_tag_description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "email", "name", "join_url", "virtual_background_id", "name_tag_id", "name_tag_name", "name_tag_pronouns", "name_tag_description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["join_url"]) -> typing.Union[MetaOapg.properties.join_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["virtual_background_id"]) -> typing.Union[MetaOapg.properties.virtual_background_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_tag_id"]) -> typing.Union[MetaOapg.properties.name_tag_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_tag_name"]) -> typing.Union[MetaOapg.properties.name_tag_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_tag_pronouns"]) -> typing.Union[MetaOapg.properties.name_tag_pronouns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_tag_description"]) -> typing.Union[MetaOapg.properties.name_tag_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "email", "name", "join_url", "virtual_background_id", "name_tag_id", "name_tag_name", "name_tag_pronouns", "name_tag_description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        join_url: typing.Union[MetaOapg.properties.join_url, str, schemas.Unset] = schemas.unset,
        virtual_background_id: typing.Union[MetaOapg.properties.virtual_background_id, str, schemas.Unset] = schemas.unset,
        name_tag_id: typing.Union[MetaOapg.properties.name_tag_id, str, schemas.Unset] = schemas.unset,
        name_tag_name: typing.Union[MetaOapg.properties.name_tag_name, str, schemas.Unset] = schemas.unset,
        name_tag_pronouns: typing.Union[MetaOapg.properties.name_tag_pronouns, str, schemas.Unset] = schemas.unset,
        name_tag_description: typing.Union[MetaOapg.properties.name_tag_description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarsListPanelistsResponsePanelistsItem':
        return super().__new__(
            cls,
            *args,
            id=id,
            email=email,
            name=name,
            join_url=join_url,
            virtual_background_id=virtual_background_id,
            name_tag_id=name_tag_id,
            name_tag_name=name_tag_name,
            name_tag_pronouns=name_tag_pronouns,
            name_tag_description=name_tag_description,
            _configuration=_configuration,
            **kwargs,
        )
