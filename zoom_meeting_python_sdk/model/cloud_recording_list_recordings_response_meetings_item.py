# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class CloudRecordingListRecordingsResponseMeetingsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The recording meeting object.
    """


    class MetaOapg:
        
        class properties:
            account_id = schemas.StrSchema
            duration = schemas.IntSchema
            host_id = schemas.StrSchema
            id = schemas.IntSchema
            recording_count = schemas.IntSchema
            start_time = schemas.DateTimeSchema
            topic = schemas.StrSchema
            total_size = schemas.Int64Schema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "1": "POSITIVE_1",
                        "2": "POSITIVE_2",
                        "3": "POSITIVE_3",
                        "4": "POSITIVE_4",
                        "5": "POSITIVE_5",
                        "6": "POSITIVE_6",
                        "7": "POSITIVE_7",
                        "8": "POSITIVE_8",
                        "9": "POSITIVE_9",
                        "99": "POSITIVE_99",
                    }
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls("1")
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls("2")
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls("3")
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls("4")
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls("5")
                
                @schemas.classproperty
                def POSITIVE_6(cls):
                    return cls("6")
                
                @schemas.classproperty
                def POSITIVE_7(cls):
                    return cls("7")
                
                @schemas.classproperty
                def POSITIVE_8(cls):
                    return cls("8")
                
                @schemas.classproperty
                def POSITIVE_9(cls):
                    return cls("9")
                
                @schemas.classproperty
                def POSITIVE_99(cls):
                    return cls("99")
            uuid = schemas.StrSchema
            recording_play_passcode = schemas.StrSchema
        
            @staticmethod
            def recording_files() -> typing.Type['CloudRecordingListRecordingsResponseMeetingsItemRecordingFiles']:
                return CloudRecordingListRecordingsResponseMeetingsItemRecordingFiles
            __annotations__ = {
                "account_id": account_id,
                "duration": duration,
                "host_id": host_id,
                "id": id,
                "recording_count": recording_count,
                "start_time": start_time,
                "topic": topic,
                "total_size": total_size,
                "type": type,
                "uuid": uuid,
                "recording_play_passcode": recording_play_passcode,
                "recording_files": recording_files,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host_id"]) -> MetaOapg.properties.host_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording_count"]) -> MetaOapg.properties.recording_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_size"]) -> MetaOapg.properties.total_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording_play_passcode"]) -> MetaOapg.properties.recording_play_passcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording_files"]) -> 'CloudRecordingListRecordingsResponseMeetingsItemRecordingFiles': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_id", "duration", "host_id", "id", "recording_count", "start_time", "topic", "total_size", "type", "uuid", "recording_play_passcode", "recording_files", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> typing.Union[MetaOapg.properties.account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host_id"]) -> typing.Union[MetaOapg.properties.host_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording_count"]) -> typing.Union[MetaOapg.properties.recording_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic"]) -> typing.Union[MetaOapg.properties.topic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_size"]) -> typing.Union[MetaOapg.properties.total_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording_play_passcode"]) -> typing.Union[MetaOapg.properties.recording_play_passcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording_files"]) -> typing.Union['CloudRecordingListRecordingsResponseMeetingsItemRecordingFiles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_id", "duration", "host_id", "id", "recording_count", "start_time", "topic", "total_size", "type", "uuid", "recording_play_passcode", "recording_files", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        host_id: typing.Union[MetaOapg.properties.host_id, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        recording_count: typing.Union[MetaOapg.properties.recording_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, str, datetime, schemas.Unset] = schemas.unset,
        topic: typing.Union[MetaOapg.properties.topic, str, schemas.Unset] = schemas.unset,
        total_size: typing.Union[MetaOapg.properties.total_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        recording_play_passcode: typing.Union[MetaOapg.properties.recording_play_passcode, str, schemas.Unset] = schemas.unset,
        recording_files: typing.Union['CloudRecordingListRecordingsResponseMeetingsItemRecordingFiles', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CloudRecordingListRecordingsResponseMeetingsItem':
        return super().__new__(
            cls,
            *args,
            account_id=account_id,
            duration=duration,
            host_id=host_id,
            id=id,
            recording_count=recording_count,
            start_time=start_time,
            topic=topic,
            total_size=total_size,
            type=type,
            uuid=uuid,
            recording_play_passcode=recording_play_passcode,
            recording_files=recording_files,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.cloud_recording_list_recordings_response_meetings_item_recording_files import CloudRecordingListRecordingsResponseMeetingsItemRecordingFiles
