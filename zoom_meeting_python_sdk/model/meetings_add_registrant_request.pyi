# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class MeetingsAddRegistrantRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about the meeting registrant.
    """


    class MetaOapg:
        required = {
            "first_name",
            "email",
        }
        
        class properties:
            
            
            class first_name(
                schemas.StrSchema
            ):
                pass
            
            
            class email(
                schemas.StrSchema
            ):
                pass
            
            
            class last_name(
                schemas.StrSchema
            ):
                pass
            address = schemas.StrSchema
            city = schemas.StrSchema
            state = schemas.StrSchema
            zip = schemas.StrSchema
            country = schemas.StrSchema
            phone = schemas.StrSchema
            comments = schemas.StrSchema
        
            @staticmethod
            def custom_questions() -> typing.Type['MeetingsAddRegistrantRequestCustomQuestions']:
                return MeetingsAddRegistrantRequestCustomQuestions
            industry = schemas.StrSchema
            job_title = schemas.StrSchema
            
            
            class no_of_employees(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
                
                @schemas.classproperty
                def _120(cls):
                    return cls("1-20")
                
                @schemas.classproperty
                def _2150(cls):
                    return cls("21-50")
                
                @schemas.classproperty
                def _51100(cls):
                    return cls("51-100")
                
                @schemas.classproperty
                def _101500(cls):
                    return cls("101-500")
                
                @schemas.classproperty
                def _5001000(cls):
                    return cls("500-1,000")
                
                @schemas.classproperty
                def _10015000(cls):
                    return cls("1,001-5,000")
                
                @schemas.classproperty
                def _500110000(cls):
                    return cls("5,001-10,000")
                
                @schemas.classproperty
                def MORE_THAN_10000(cls):
                    return cls("More than 10,000")
            org = schemas.StrSchema
            
            
            class purchasing_time_frame(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
                
                @schemas.classproperty
                def WITHIN_A_MONTH(cls):
                    return cls("Within a month")
                
                @schemas.classproperty
                def _13_MONTHS(cls):
                    return cls("1-3 months")
                
                @schemas.classproperty
                def _46_MONTHS(cls):
                    return cls("4-6 months")
                
                @schemas.classproperty
                def MORE_THAN_6_MONTHS(cls):
                    return cls("More than 6 months")
                
                @schemas.classproperty
                def NO_TIMEFRAME(cls):
                    return cls("No timeframe")
            
            
            class role_in_purchase_process(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
                
                @schemas.classproperty
                def DECISION_MAKER(cls):
                    return cls("Decision Maker")
                
                @schemas.classproperty
                def EVALUATOR_RECOMMENDER(cls):
                    return cls("Evaluator/Recommender")
                
                @schemas.classproperty
                def INFLUENCER(cls):
                    return cls("Influencer")
                
                @schemas.classproperty
                def NOT_INVOLVED(cls):
                    return cls("Not involved")
            
            
            class language(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ENUS(cls):
                    return cls("en-US")
                
                @schemas.classproperty
                def DEDE(cls):
                    return cls("de-DE")
                
                @schemas.classproperty
                def ESES(cls):
                    return cls("es-ES")
                
                @schemas.classproperty
                def FRFR(cls):
                    return cls("fr-FR")
                
                @schemas.classproperty
                def JPJP(cls):
                    return cls("jp-JP")
                
                @schemas.classproperty
                def PTPT(cls):
                    return cls("pt-PT")
                
                @schemas.classproperty
                def RURU(cls):
                    return cls("ru-RU")
                
                @schemas.classproperty
                def ZHCN(cls):
                    return cls("zh-CN")
                
                @schemas.classproperty
                def ZHTW(cls):
                    return cls("zh-TW")
                
                @schemas.classproperty
                def KOKO(cls):
                    return cls("ko-KO")
                
                @schemas.classproperty
                def ITIT(cls):
                    return cls("it-IT")
                
                @schemas.classproperty
                def VIVN(cls):
                    return cls("vi-VN")
                
                @schemas.classproperty
                def PLPL(cls):
                    return cls("pl-PL")
                
                @schemas.classproperty
                def TRTR(cls):
                    return cls("Tr-TR")
            auto_approve = schemas.BoolSchema
            __annotations__ = {
                "first_name": first_name,
                "email": email,
                "last_name": last_name,
                "address": address,
                "city": city,
                "state": state,
                "zip": zip,
                "country": country,
                "phone": phone,
                "comments": comments,
                "custom_questions": custom_questions,
                "industry": industry,
                "job_title": job_title,
                "no_of_employees": no_of_employees,
                "org": org,
                "purchasing_time_frame": purchasing_time_frame,
                "role_in_purchase_process": role_in_purchase_process,
                "language": language,
                "auto_approve": auto_approve,
            }
    
    first_name: MetaOapg.properties.first_name
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zip"]) -> MetaOapg.properties.zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_questions"]) -> 'MeetingsAddRegistrantRequestCustomQuestions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["industry"]) -> MetaOapg.properties.industry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_title"]) -> MetaOapg.properties.job_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["no_of_employees"]) -> MetaOapg.properties.no_of_employees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org"]) -> MetaOapg.properties.org: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchasing_time_frame"]) -> MetaOapg.properties.purchasing_time_frame: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role_in_purchase_process"]) -> MetaOapg.properties.role_in_purchase_process: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_approve"]) -> MetaOapg.properties.auto_approve: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["first_name", "email", "last_name", "address", "city", "state", "zip", "country", "phone", "comments", "custom_questions", "industry", "job_title", "no_of_employees", "org", "purchasing_time_frame", "role_in_purchase_process", "language", "auto_approve", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union[MetaOapg.properties.last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zip"]) -> typing.Union[MetaOapg.properties.zip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_questions"]) -> typing.Union['MeetingsAddRegistrantRequestCustomQuestions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["industry"]) -> typing.Union[MetaOapg.properties.industry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_title"]) -> typing.Union[MetaOapg.properties.job_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["no_of_employees"]) -> typing.Union[MetaOapg.properties.no_of_employees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org"]) -> typing.Union[MetaOapg.properties.org, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchasing_time_frame"]) -> typing.Union[MetaOapg.properties.purchasing_time_frame, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role_in_purchase_process"]) -> typing.Union[MetaOapg.properties.role_in_purchase_process, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_approve"]) -> typing.Union[MetaOapg.properties.auto_approve, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["first_name", "email", "last_name", "address", "city", "state", "zip", "country", "phone", "comments", "custom_questions", "industry", "job_title", "no_of_employees", "org", "purchasing_time_frame", "role_in_purchase_process", "language", "auto_approve", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        first_name: typing.Union[MetaOapg.properties.first_name, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        last_name: typing.Union[MetaOapg.properties.last_name, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        zip: typing.Union[MetaOapg.properties.zip, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, str, schemas.Unset] = schemas.unset,
        custom_questions: typing.Union['MeetingsAddRegistrantRequestCustomQuestions', schemas.Unset] = schemas.unset,
        industry: typing.Union[MetaOapg.properties.industry, str, schemas.Unset] = schemas.unset,
        job_title: typing.Union[MetaOapg.properties.job_title, str, schemas.Unset] = schemas.unset,
        no_of_employees: typing.Union[MetaOapg.properties.no_of_employees, str, schemas.Unset] = schemas.unset,
        org: typing.Union[MetaOapg.properties.org, str, schemas.Unset] = schemas.unset,
        purchasing_time_frame: typing.Union[MetaOapg.properties.purchasing_time_frame, str, schemas.Unset] = schemas.unset,
        role_in_purchase_process: typing.Union[MetaOapg.properties.role_in_purchase_process, str, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        auto_approve: typing.Union[MetaOapg.properties.auto_approve, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MeetingsAddRegistrantRequest':
        return super().__new__(
            cls,
            *args,
            first_name=first_name,
            email=email,
            last_name=last_name,
            address=address,
            city=city,
            state=state,
            zip=zip,
            country=country,
            phone=phone,
            comments=comments,
            custom_questions=custom_questions,
            industry=industry,
            job_title=job_title,
            no_of_employees=no_of_employees,
            org=org,
            purchasing_time_frame=purchasing_time_frame,
            role_in_purchase_process=role_in_purchase_process,
            language=language,
            auto_approve=auto_approve,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.meetings_add_registrant_request_custom_questions import MeetingsAddRegistrantRequestCustomQuestions
