# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class ReportsGetDailyUsageReportResponseDatesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            date = schemas.DateSchema
            meeting_minutes = schemas.IntSchema
            meetings = schemas.IntSchema
            new_users = schemas.IntSchema
            participants = schemas.IntSchema
            __annotations__ = {
                "date": date,
                "meeting_minutes": meeting_minutes,
                "meetings": meetings,
                "new_users": new_users,
                "participants": participants,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meeting_minutes"]) -> MetaOapg.properties.meeting_minutes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meetings"]) -> MetaOapg.properties.meetings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_users"]) -> MetaOapg.properties.new_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["participants"]) -> MetaOapg.properties.participants: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date", "meeting_minutes", "meetings", "new_users", "participants", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meeting_minutes"]) -> typing.Union[MetaOapg.properties.meeting_minutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meetings"]) -> typing.Union[MetaOapg.properties.meetings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_users"]) -> typing.Union[MetaOapg.properties.new_users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["participants"]) -> typing.Union[MetaOapg.properties.participants, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date", "meeting_minutes", "meetings", "new_users", "participants", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, date, schemas.Unset] = schemas.unset,
        meeting_minutes: typing.Union[MetaOapg.properties.meeting_minutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        meetings: typing.Union[MetaOapg.properties.meetings, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        new_users: typing.Union[MetaOapg.properties.new_users, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        participants: typing.Union[MetaOapg.properties.participants, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportsGetDailyUsageReportResponseDatesItem':
        return super().__new__(
            cls,
            *args,
            date=date,
            meeting_minutes=meeting_minutes,
            meetings=meetings,
            new_users=new_users,
            participants=participants,
            _configuration=_configuration,
            **kwargs,
        )
