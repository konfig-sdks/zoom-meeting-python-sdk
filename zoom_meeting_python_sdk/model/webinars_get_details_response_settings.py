# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class WebinarsGetDetailsResponseSettings(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Webinar settings.
    """


    class MetaOapg:
        
        class properties:
            allow_multiple_devices = schemas.BoolSchema
            alternative_hosts = schemas.StrSchema
            alternative_host_update_polls = schemas.BoolSchema
            
            
            class approval_type(
                schemas.EnumBase,
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        0: "POSITIVE_0",
                        1: "POSITIVE_1",
                        2: "POSITIVE_2",
                    }
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls(0)
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
        
            @staticmethod
            def attendees_and_panelists_reminder_email_notification() -> typing.Type['WebinarsGetDetailsResponseSettingsAttendeesAndPanelistsReminderEmailNotification']:
                return WebinarsGetDetailsResponseSettingsAttendeesAndPanelistsReminderEmailNotification
            
            
            class audio(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "both": "BOTH",
                        "telephony": "TELEPHONY",
                        "voip": "VOIP",
                        "thirdParty": "THIRD_PARTY",
                    }
                
                @schemas.classproperty
                def BOTH(cls):
                    return cls("both")
                
                @schemas.classproperty
                def TELEPHONY(cls):
                    return cls("telephony")
                
                @schemas.classproperty
                def VOIP(cls):
                    return cls("voip")
                
                @schemas.classproperty
                def THIRD_PARTY(cls):
                    return cls("thirdParty")
            
            
            class audio_conference_info(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2048
            authentication_domains = schemas.StrSchema
            authentication_name = schemas.StrSchema
            authentication_option = schemas.StrSchema
            
            
            class auto_recording(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "local": "LOCAL",
                        "cloud": "CLOUD",
                        "none": "NONE",
                    }
                
                @schemas.classproperty
                def LOCAL(cls):
                    return cls("local")
                
                @schemas.classproperty
                def CLOUD(cls):
                    return cls("cloud")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("none")
            close_registration = schemas.BoolSchema
            contact_email = schemas.StrSchema
            contact_name = schemas.StrSchema
            email_language = schemas.StrSchema
            enforce_login = schemas.BoolSchema
            enforce_login_domains = schemas.StrSchema
        
            @staticmethod
            def follow_up_absentees_email_notification() -> typing.Type['WebinarsGetDetailsResponseSettingsFollowUpAbsenteesEmailNotification']:
                return WebinarsGetDetailsResponseSettingsFollowUpAbsenteesEmailNotification
        
            @staticmethod
            def follow_up_attendees_email_notification() -> typing.Type['WebinarsGetDetailsResponseSettingsFollowUpAttendeesEmailNotification']:
                return WebinarsGetDetailsResponseSettingsFollowUpAttendeesEmailNotification
        
            @staticmethod
            def global_dial_in_countries() -> typing.Type['WebinarsGetDetailsResponseSettingsGlobalDialInCountries']:
                return WebinarsGetDetailsResponseSettingsGlobalDialInCountries
            hd_video = schemas.BoolSchema
            hd_video_for_attendees = schemas.BoolSchema
            host_video = schemas.BoolSchema
        
            @staticmethod
            def language_interpretation() -> typing.Type['WebinarsGetDetailsResponseSettingsLanguageInterpretation']:
                return WebinarsGetDetailsResponseSettingsLanguageInterpretation
        
            @staticmethod
            def sign_language_interpretation() -> typing.Type['WebinarsGetDetailsResponseSettingsSignLanguageInterpretation']:
                return WebinarsGetDetailsResponseSettingsSignLanguageInterpretation
            panelist_authentication = schemas.BoolSchema
            meeting_authentication = schemas.BoolSchema
            add_watermark = schemas.BoolSchema
            add_audio_watermark = schemas.BoolSchema
            notify_registrants = schemas.BoolSchema
            on_demand = schemas.BoolSchema
            panelists_invitation_email_notification = schemas.BoolSchema
            panelists_video = schemas.BoolSchema
            post_webinar_survey = schemas.BoolSchema
            practice_session = schemas.BoolSchema
        
            @staticmethod
            def question_and_answer() -> typing.Type['WebinarsGetDetailsResponseSettingsQuestionAndAnswer']:
                return WebinarsGetDetailsResponseSettingsQuestionAndAnswer
            registrants_confirmation_email = schemas.BoolSchema
            registrants_email_notification = schemas.BoolSchema
            
            
            class registrants_restrict_number(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 20000
                    inclusive_minimum = 0
            
            
            class registration_type(
                schemas.EnumBase,
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        1: "POSITIVE_1",
                        2: "POSITIVE_2",
                        3: "POSITIVE_3",
                    }
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
            send_1080p_video_to_attendees = schemas.BoolSchema
            show_share_button = schemas.BoolSchema
            survey_url = schemas.StrSchema
            enable_session_branding = schemas.BoolSchema
            __annotations__ = {
                "allow_multiple_devices": allow_multiple_devices,
                "alternative_hosts": alternative_hosts,
                "alternative_host_update_polls": alternative_host_update_polls,
                "approval_type": approval_type,
                "attendees_and_panelists_reminder_email_notification": attendees_and_panelists_reminder_email_notification,
                "audio": audio,
                "audio_conference_info": audio_conference_info,
                "authentication_domains": authentication_domains,
                "authentication_name": authentication_name,
                "authentication_option": authentication_option,
                "auto_recording": auto_recording,
                "close_registration": close_registration,
                "contact_email": contact_email,
                "contact_name": contact_name,
                "email_language": email_language,
                "enforce_login": enforce_login,
                "enforce_login_domains": enforce_login_domains,
                "follow_up_absentees_email_notification": follow_up_absentees_email_notification,
                "follow_up_attendees_email_notification": follow_up_attendees_email_notification,
                "global_dial_in_countries": global_dial_in_countries,
                "hd_video": hd_video,
                "hd_video_for_attendees": hd_video_for_attendees,
                "host_video": host_video,
                "language_interpretation": language_interpretation,
                "sign_language_interpretation": sign_language_interpretation,
                "panelist_authentication": panelist_authentication,
                "meeting_authentication": meeting_authentication,
                "add_watermark": add_watermark,
                "add_audio_watermark": add_audio_watermark,
                "notify_registrants": notify_registrants,
                "on_demand": on_demand,
                "panelists_invitation_email_notification": panelists_invitation_email_notification,
                "panelists_video": panelists_video,
                "post_webinar_survey": post_webinar_survey,
                "practice_session": practice_session,
                "question_and_answer": question_and_answer,
                "registrants_confirmation_email": registrants_confirmation_email,
                "registrants_email_notification": registrants_email_notification,
                "registrants_restrict_number": registrants_restrict_number,
                "registration_type": registration_type,
                "send_1080p_video_to_attendees": send_1080p_video_to_attendees,
                "show_share_button": show_share_button,
                "survey_url": survey_url,
                "enable_session_branding": enable_session_branding,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_multiple_devices"]) -> MetaOapg.properties.allow_multiple_devices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternative_hosts"]) -> MetaOapg.properties.alternative_hosts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternative_host_update_polls"]) -> MetaOapg.properties.alternative_host_update_polls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approval_type"]) -> MetaOapg.properties.approval_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendees_and_panelists_reminder_email_notification"]) -> 'WebinarsGetDetailsResponseSettingsAttendeesAndPanelistsReminderEmailNotification': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio"]) -> MetaOapg.properties.audio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio_conference_info"]) -> MetaOapg.properties.audio_conference_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication_domains"]) -> MetaOapg.properties.authentication_domains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication_name"]) -> MetaOapg.properties.authentication_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication_option"]) -> MetaOapg.properties.authentication_option: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_recording"]) -> MetaOapg.properties.auto_recording: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["close_registration"]) -> MetaOapg.properties.close_registration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact_email"]) -> MetaOapg.properties.contact_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact_name"]) -> MetaOapg.properties.contact_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_language"]) -> MetaOapg.properties.email_language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enforce_login"]) -> MetaOapg.properties.enforce_login: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enforce_login_domains"]) -> MetaOapg.properties.enforce_login_domains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["follow_up_absentees_email_notification"]) -> 'WebinarsGetDetailsResponseSettingsFollowUpAbsenteesEmailNotification': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["follow_up_attendees_email_notification"]) -> 'WebinarsGetDetailsResponseSettingsFollowUpAttendeesEmailNotification': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["global_dial_in_countries"]) -> 'WebinarsGetDetailsResponseSettingsGlobalDialInCountries': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hd_video"]) -> MetaOapg.properties.hd_video: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hd_video_for_attendees"]) -> MetaOapg.properties.hd_video_for_attendees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host_video"]) -> MetaOapg.properties.host_video: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language_interpretation"]) -> 'WebinarsGetDetailsResponseSettingsLanguageInterpretation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sign_language_interpretation"]) -> 'WebinarsGetDetailsResponseSettingsSignLanguageInterpretation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["panelist_authentication"]) -> MetaOapg.properties.panelist_authentication: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meeting_authentication"]) -> MetaOapg.properties.meeting_authentication: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_watermark"]) -> MetaOapg.properties.add_watermark: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_audio_watermark"]) -> MetaOapg.properties.add_audio_watermark: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notify_registrants"]) -> MetaOapg.properties.notify_registrants: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["on_demand"]) -> MetaOapg.properties.on_demand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["panelists_invitation_email_notification"]) -> MetaOapg.properties.panelists_invitation_email_notification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["panelists_video"]) -> MetaOapg.properties.panelists_video: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_webinar_survey"]) -> MetaOapg.properties.post_webinar_survey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["practice_session"]) -> MetaOapg.properties.practice_session: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["question_and_answer"]) -> 'WebinarsGetDetailsResponseSettingsQuestionAndAnswer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrants_confirmation_email"]) -> MetaOapg.properties.registrants_confirmation_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrants_email_notification"]) -> MetaOapg.properties.registrants_email_notification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrants_restrict_number"]) -> MetaOapg.properties.registrants_restrict_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registration_type"]) -> MetaOapg.properties.registration_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["send_1080p_video_to_attendees"]) -> MetaOapg.properties.send_1080p_video_to_attendees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_share_button"]) -> MetaOapg.properties.show_share_button: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["survey_url"]) -> MetaOapg.properties.survey_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_session_branding"]) -> MetaOapg.properties.enable_session_branding: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allow_multiple_devices", "alternative_hosts", "alternative_host_update_polls", "approval_type", "attendees_and_panelists_reminder_email_notification", "audio", "audio_conference_info", "authentication_domains", "authentication_name", "authentication_option", "auto_recording", "close_registration", "contact_email", "contact_name", "email_language", "enforce_login", "enforce_login_domains", "follow_up_absentees_email_notification", "follow_up_attendees_email_notification", "global_dial_in_countries", "hd_video", "hd_video_for_attendees", "host_video", "language_interpretation", "sign_language_interpretation", "panelist_authentication", "meeting_authentication", "add_watermark", "add_audio_watermark", "notify_registrants", "on_demand", "panelists_invitation_email_notification", "panelists_video", "post_webinar_survey", "practice_session", "question_and_answer", "registrants_confirmation_email", "registrants_email_notification", "registrants_restrict_number", "registration_type", "send_1080p_video_to_attendees", "show_share_button", "survey_url", "enable_session_branding", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_multiple_devices"]) -> typing.Union[MetaOapg.properties.allow_multiple_devices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternative_hosts"]) -> typing.Union[MetaOapg.properties.alternative_hosts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternative_host_update_polls"]) -> typing.Union[MetaOapg.properties.alternative_host_update_polls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approval_type"]) -> typing.Union[MetaOapg.properties.approval_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendees_and_panelists_reminder_email_notification"]) -> typing.Union['WebinarsGetDetailsResponseSettingsAttendeesAndPanelistsReminderEmailNotification', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audio"]) -> typing.Union[MetaOapg.properties.audio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audio_conference_info"]) -> typing.Union[MetaOapg.properties.audio_conference_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication_domains"]) -> typing.Union[MetaOapg.properties.authentication_domains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication_name"]) -> typing.Union[MetaOapg.properties.authentication_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication_option"]) -> typing.Union[MetaOapg.properties.authentication_option, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_recording"]) -> typing.Union[MetaOapg.properties.auto_recording, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["close_registration"]) -> typing.Union[MetaOapg.properties.close_registration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact_email"]) -> typing.Union[MetaOapg.properties.contact_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact_name"]) -> typing.Union[MetaOapg.properties.contact_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_language"]) -> typing.Union[MetaOapg.properties.email_language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enforce_login"]) -> typing.Union[MetaOapg.properties.enforce_login, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enforce_login_domains"]) -> typing.Union[MetaOapg.properties.enforce_login_domains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["follow_up_absentees_email_notification"]) -> typing.Union['WebinarsGetDetailsResponseSettingsFollowUpAbsenteesEmailNotification', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["follow_up_attendees_email_notification"]) -> typing.Union['WebinarsGetDetailsResponseSettingsFollowUpAttendeesEmailNotification', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["global_dial_in_countries"]) -> typing.Union['WebinarsGetDetailsResponseSettingsGlobalDialInCountries', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hd_video"]) -> typing.Union[MetaOapg.properties.hd_video, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hd_video_for_attendees"]) -> typing.Union[MetaOapg.properties.hd_video_for_attendees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host_video"]) -> typing.Union[MetaOapg.properties.host_video, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language_interpretation"]) -> typing.Union['WebinarsGetDetailsResponseSettingsLanguageInterpretation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sign_language_interpretation"]) -> typing.Union['WebinarsGetDetailsResponseSettingsSignLanguageInterpretation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["panelist_authentication"]) -> typing.Union[MetaOapg.properties.panelist_authentication, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meeting_authentication"]) -> typing.Union[MetaOapg.properties.meeting_authentication, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_watermark"]) -> typing.Union[MetaOapg.properties.add_watermark, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_audio_watermark"]) -> typing.Union[MetaOapg.properties.add_audio_watermark, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notify_registrants"]) -> typing.Union[MetaOapg.properties.notify_registrants, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["on_demand"]) -> typing.Union[MetaOapg.properties.on_demand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["panelists_invitation_email_notification"]) -> typing.Union[MetaOapg.properties.panelists_invitation_email_notification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["panelists_video"]) -> typing.Union[MetaOapg.properties.panelists_video, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_webinar_survey"]) -> typing.Union[MetaOapg.properties.post_webinar_survey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["practice_session"]) -> typing.Union[MetaOapg.properties.practice_session, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["question_and_answer"]) -> typing.Union['WebinarsGetDetailsResponseSettingsQuestionAndAnswer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrants_confirmation_email"]) -> typing.Union[MetaOapg.properties.registrants_confirmation_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrants_email_notification"]) -> typing.Union[MetaOapg.properties.registrants_email_notification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrants_restrict_number"]) -> typing.Union[MetaOapg.properties.registrants_restrict_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registration_type"]) -> typing.Union[MetaOapg.properties.registration_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["send_1080p_video_to_attendees"]) -> typing.Union[MetaOapg.properties.send_1080p_video_to_attendees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_share_button"]) -> typing.Union[MetaOapg.properties.show_share_button, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["survey_url"]) -> typing.Union[MetaOapg.properties.survey_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_session_branding"]) -> typing.Union[MetaOapg.properties.enable_session_branding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allow_multiple_devices", "alternative_hosts", "alternative_host_update_polls", "approval_type", "attendees_and_panelists_reminder_email_notification", "audio", "audio_conference_info", "authentication_domains", "authentication_name", "authentication_option", "auto_recording", "close_registration", "contact_email", "contact_name", "email_language", "enforce_login", "enforce_login_domains", "follow_up_absentees_email_notification", "follow_up_attendees_email_notification", "global_dial_in_countries", "hd_video", "hd_video_for_attendees", "host_video", "language_interpretation", "sign_language_interpretation", "panelist_authentication", "meeting_authentication", "add_watermark", "add_audio_watermark", "notify_registrants", "on_demand", "panelists_invitation_email_notification", "panelists_video", "post_webinar_survey", "practice_session", "question_and_answer", "registrants_confirmation_email", "registrants_email_notification", "registrants_restrict_number", "registration_type", "send_1080p_video_to_attendees", "show_share_button", "survey_url", "enable_session_branding", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        allow_multiple_devices: typing.Union[MetaOapg.properties.allow_multiple_devices, bool, schemas.Unset] = schemas.unset,
        alternative_hosts: typing.Union[MetaOapg.properties.alternative_hosts, str, schemas.Unset] = schemas.unset,
        alternative_host_update_polls: typing.Union[MetaOapg.properties.alternative_host_update_polls, bool, schemas.Unset] = schemas.unset,
        approval_type: typing.Union[MetaOapg.properties.approval_type, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attendees_and_panelists_reminder_email_notification: typing.Union['WebinarsGetDetailsResponseSettingsAttendeesAndPanelistsReminderEmailNotification', schemas.Unset] = schemas.unset,
        audio: typing.Union[MetaOapg.properties.audio, str, schemas.Unset] = schemas.unset,
        audio_conference_info: typing.Union[MetaOapg.properties.audio_conference_info, str, schemas.Unset] = schemas.unset,
        authentication_domains: typing.Union[MetaOapg.properties.authentication_domains, str, schemas.Unset] = schemas.unset,
        authentication_name: typing.Union[MetaOapg.properties.authentication_name, str, schemas.Unset] = schemas.unset,
        authentication_option: typing.Union[MetaOapg.properties.authentication_option, str, schemas.Unset] = schemas.unset,
        auto_recording: typing.Union[MetaOapg.properties.auto_recording, str, schemas.Unset] = schemas.unset,
        close_registration: typing.Union[MetaOapg.properties.close_registration, bool, schemas.Unset] = schemas.unset,
        contact_email: typing.Union[MetaOapg.properties.contact_email, str, schemas.Unset] = schemas.unset,
        contact_name: typing.Union[MetaOapg.properties.contact_name, str, schemas.Unset] = schemas.unset,
        email_language: typing.Union[MetaOapg.properties.email_language, str, schemas.Unset] = schemas.unset,
        enforce_login: typing.Union[MetaOapg.properties.enforce_login, bool, schemas.Unset] = schemas.unset,
        enforce_login_domains: typing.Union[MetaOapg.properties.enforce_login_domains, str, schemas.Unset] = schemas.unset,
        follow_up_absentees_email_notification: typing.Union['WebinarsGetDetailsResponseSettingsFollowUpAbsenteesEmailNotification', schemas.Unset] = schemas.unset,
        follow_up_attendees_email_notification: typing.Union['WebinarsGetDetailsResponseSettingsFollowUpAttendeesEmailNotification', schemas.Unset] = schemas.unset,
        global_dial_in_countries: typing.Union['WebinarsGetDetailsResponseSettingsGlobalDialInCountries', schemas.Unset] = schemas.unset,
        hd_video: typing.Union[MetaOapg.properties.hd_video, bool, schemas.Unset] = schemas.unset,
        hd_video_for_attendees: typing.Union[MetaOapg.properties.hd_video_for_attendees, bool, schemas.Unset] = schemas.unset,
        host_video: typing.Union[MetaOapg.properties.host_video, bool, schemas.Unset] = schemas.unset,
        language_interpretation: typing.Union['WebinarsGetDetailsResponseSettingsLanguageInterpretation', schemas.Unset] = schemas.unset,
        sign_language_interpretation: typing.Union['WebinarsGetDetailsResponseSettingsSignLanguageInterpretation', schemas.Unset] = schemas.unset,
        panelist_authentication: typing.Union[MetaOapg.properties.panelist_authentication, bool, schemas.Unset] = schemas.unset,
        meeting_authentication: typing.Union[MetaOapg.properties.meeting_authentication, bool, schemas.Unset] = schemas.unset,
        add_watermark: typing.Union[MetaOapg.properties.add_watermark, bool, schemas.Unset] = schemas.unset,
        add_audio_watermark: typing.Union[MetaOapg.properties.add_audio_watermark, bool, schemas.Unset] = schemas.unset,
        notify_registrants: typing.Union[MetaOapg.properties.notify_registrants, bool, schemas.Unset] = schemas.unset,
        on_demand: typing.Union[MetaOapg.properties.on_demand, bool, schemas.Unset] = schemas.unset,
        panelists_invitation_email_notification: typing.Union[MetaOapg.properties.panelists_invitation_email_notification, bool, schemas.Unset] = schemas.unset,
        panelists_video: typing.Union[MetaOapg.properties.panelists_video, bool, schemas.Unset] = schemas.unset,
        post_webinar_survey: typing.Union[MetaOapg.properties.post_webinar_survey, bool, schemas.Unset] = schemas.unset,
        practice_session: typing.Union[MetaOapg.properties.practice_session, bool, schemas.Unset] = schemas.unset,
        question_and_answer: typing.Union['WebinarsGetDetailsResponseSettingsQuestionAndAnswer', schemas.Unset] = schemas.unset,
        registrants_confirmation_email: typing.Union[MetaOapg.properties.registrants_confirmation_email, bool, schemas.Unset] = schemas.unset,
        registrants_email_notification: typing.Union[MetaOapg.properties.registrants_email_notification, bool, schemas.Unset] = schemas.unset,
        registrants_restrict_number: typing.Union[MetaOapg.properties.registrants_restrict_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        registration_type: typing.Union[MetaOapg.properties.registration_type, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        send_1080p_video_to_attendees: typing.Union[MetaOapg.properties.send_1080p_video_to_attendees, bool, schemas.Unset] = schemas.unset,
        show_share_button: typing.Union[MetaOapg.properties.show_share_button, bool, schemas.Unset] = schemas.unset,
        survey_url: typing.Union[MetaOapg.properties.survey_url, str, schemas.Unset] = schemas.unset,
        enable_session_branding: typing.Union[MetaOapg.properties.enable_session_branding, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarsGetDetailsResponseSettings':
        return super().__new__(
            cls,
            *args,
            allow_multiple_devices=allow_multiple_devices,
            alternative_hosts=alternative_hosts,
            alternative_host_update_polls=alternative_host_update_polls,
            approval_type=approval_type,
            attendees_and_panelists_reminder_email_notification=attendees_and_panelists_reminder_email_notification,
            audio=audio,
            audio_conference_info=audio_conference_info,
            authentication_domains=authentication_domains,
            authentication_name=authentication_name,
            authentication_option=authentication_option,
            auto_recording=auto_recording,
            close_registration=close_registration,
            contact_email=contact_email,
            contact_name=contact_name,
            email_language=email_language,
            enforce_login=enforce_login,
            enforce_login_domains=enforce_login_domains,
            follow_up_absentees_email_notification=follow_up_absentees_email_notification,
            follow_up_attendees_email_notification=follow_up_attendees_email_notification,
            global_dial_in_countries=global_dial_in_countries,
            hd_video=hd_video,
            hd_video_for_attendees=hd_video_for_attendees,
            host_video=host_video,
            language_interpretation=language_interpretation,
            sign_language_interpretation=sign_language_interpretation,
            panelist_authentication=panelist_authentication,
            meeting_authentication=meeting_authentication,
            add_watermark=add_watermark,
            add_audio_watermark=add_audio_watermark,
            notify_registrants=notify_registrants,
            on_demand=on_demand,
            panelists_invitation_email_notification=panelists_invitation_email_notification,
            panelists_video=panelists_video,
            post_webinar_survey=post_webinar_survey,
            practice_session=practice_session,
            question_and_answer=question_and_answer,
            registrants_confirmation_email=registrants_confirmation_email,
            registrants_email_notification=registrants_email_notification,
            registrants_restrict_number=registrants_restrict_number,
            registration_type=registration_type,
            send_1080p_video_to_attendees=send_1080p_video_to_attendees,
            show_share_button=show_share_button,
            survey_url=survey_url,
            enable_session_branding=enable_session_branding,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.webinars_get_details_response_settings_attendees_and_panelists_reminder_email_notification import WebinarsGetDetailsResponseSettingsAttendeesAndPanelistsReminderEmailNotification
from zoom_meeting_python_sdk.model.webinars_get_details_response_settings_follow_up_absentees_email_notification import WebinarsGetDetailsResponseSettingsFollowUpAbsenteesEmailNotification
from zoom_meeting_python_sdk.model.webinars_get_details_response_settings_follow_up_attendees_email_notification import WebinarsGetDetailsResponseSettingsFollowUpAttendeesEmailNotification
from zoom_meeting_python_sdk.model.webinars_get_details_response_settings_global_dial_in_countries import WebinarsGetDetailsResponseSettingsGlobalDialInCountries
from zoom_meeting_python_sdk.model.webinars_get_details_response_settings_language_interpretation import WebinarsGetDetailsResponseSettingsLanguageInterpretation
from zoom_meeting_python_sdk.model.webinars_get_details_response_settings_question_and_answer import WebinarsGetDetailsResponseSettingsQuestionAndAnswer
from zoom_meeting_python_sdk.model.webinars_get_details_response_settings_sign_language_interpretation import WebinarsGetDetailsResponseSettingsSignLanguageInterpretation
