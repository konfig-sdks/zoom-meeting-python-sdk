# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class WebinarsGetDetailsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Webinar object.
    """


    class MetaOapg:
        
        class properties:
            host_email = schemas.StrSchema
            host_id = schemas.StrSchema
            id = schemas.Int64Schema
            uuid = schemas.StrSchema
            agenda = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            duration = schemas.IntSchema
            join_url = schemas.StrSchema
        
            @staticmethod
            def occurrences() -> typing.Type['WebinarsGetDetailsResponseOccurrences']:
                return WebinarsGetDetailsResponseOccurrences
            
            
            class password(
                schemas.StrSchema
            ):
                pass
            encrypted_passcode = schemas.StrSchema
            h323_passcode = schemas.StrSchema
        
            @staticmethod
            def recurrence() -> typing.Type['WebinarsGetDetailsResponseRecurrence']:
                return WebinarsGetDetailsResponseRecurrence
        
            @staticmethod
            def settings() -> typing.Type['WebinarsGetDetailsResponseSettings']:
                return WebinarsGetDetailsResponseSettings
            start_time = schemas.DateTimeSchema
            start_url = schemas.StrSchema
            timezone = schemas.StrSchema
            
            
            class topic(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def tracking_fields() -> typing.Type['WebinarsGetDetailsResponseTrackingFields']:
                return WebinarsGetDetailsResponseTrackingFields
            
            
            class type(
                schemas.EnumBase,
                schemas.IntSchema
            ):
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls(5)
                
                @schemas.classproperty
                def POSITIVE_6(cls):
                    return cls(6)
                
                @schemas.classproperty
                def POSITIVE_9(cls):
                    return cls(9)
            is_simulive = schemas.BoolSchema
            record_file_id = schemas.StrSchema
            __annotations__ = {
                "host_email": host_email,
                "host_id": host_id,
                "id": id,
                "uuid": uuid,
                "agenda": agenda,
                "created_at": created_at,
                "duration": duration,
                "join_url": join_url,
                "occurrences": occurrences,
                "password": password,
                "encrypted_passcode": encrypted_passcode,
                "h323_passcode": h323_passcode,
                "recurrence": recurrence,
                "settings": settings,
                "start_time": start_time,
                "start_url": start_url,
                "timezone": timezone,
                "topic": topic,
                "tracking_fields": tracking_fields,
                "type": type,
                "is_simulive": is_simulive,
                "record_file_id": record_file_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host_email"]) -> MetaOapg.properties.host_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host_id"]) -> MetaOapg.properties.host_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["agenda"]) -> MetaOapg.properties.agenda: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["join_url"]) -> MetaOapg.properties.join_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["occurrences"]) -> 'WebinarsGetDetailsResponseOccurrences': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encrypted_passcode"]) -> MetaOapg.properties.encrypted_passcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["h323_passcode"]) -> MetaOapg.properties.h323_passcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurrence"]) -> 'WebinarsGetDetailsResponseRecurrence': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> 'WebinarsGetDetailsResponseSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_url"]) -> MetaOapg.properties.start_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_fields"]) -> 'WebinarsGetDetailsResponseTrackingFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_simulive"]) -> MetaOapg.properties.is_simulive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["record_file_id"]) -> MetaOapg.properties.record_file_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["host_email", "host_id", "id", "uuid", "agenda", "created_at", "duration", "join_url", "occurrences", "password", "encrypted_passcode", "h323_passcode", "recurrence", "settings", "start_time", "start_url", "timezone", "topic", "tracking_fields", "type", "is_simulive", "record_file_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host_email"]) -> typing.Union[MetaOapg.properties.host_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host_id"]) -> typing.Union[MetaOapg.properties.host_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["agenda"]) -> typing.Union[MetaOapg.properties.agenda, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["join_url"]) -> typing.Union[MetaOapg.properties.join_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["occurrences"]) -> typing.Union['WebinarsGetDetailsResponseOccurrences', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encrypted_passcode"]) -> typing.Union[MetaOapg.properties.encrypted_passcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["h323_passcode"]) -> typing.Union[MetaOapg.properties.h323_passcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurrence"]) -> typing.Union['WebinarsGetDetailsResponseRecurrence', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> typing.Union['WebinarsGetDetailsResponseSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_url"]) -> typing.Union[MetaOapg.properties.start_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic"]) -> typing.Union[MetaOapg.properties.topic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_fields"]) -> typing.Union['WebinarsGetDetailsResponseTrackingFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_simulive"]) -> typing.Union[MetaOapg.properties.is_simulive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["record_file_id"]) -> typing.Union[MetaOapg.properties.record_file_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["host_email", "host_id", "id", "uuid", "agenda", "created_at", "duration", "join_url", "occurrences", "password", "encrypted_passcode", "h323_passcode", "recurrence", "settings", "start_time", "start_url", "timezone", "topic", "tracking_fields", "type", "is_simulive", "record_file_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        host_email: typing.Union[MetaOapg.properties.host_email, str, schemas.Unset] = schemas.unset,
        host_id: typing.Union[MetaOapg.properties.host_id, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        agenda: typing.Union[MetaOapg.properties.agenda, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        join_url: typing.Union[MetaOapg.properties.join_url, str, schemas.Unset] = schemas.unset,
        occurrences: typing.Union['WebinarsGetDetailsResponseOccurrences', schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        encrypted_passcode: typing.Union[MetaOapg.properties.encrypted_passcode, str, schemas.Unset] = schemas.unset,
        h323_passcode: typing.Union[MetaOapg.properties.h323_passcode, str, schemas.Unset] = schemas.unset,
        recurrence: typing.Union['WebinarsGetDetailsResponseRecurrence', schemas.Unset] = schemas.unset,
        settings: typing.Union['WebinarsGetDetailsResponseSettings', schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, str, datetime, schemas.Unset] = schemas.unset,
        start_url: typing.Union[MetaOapg.properties.start_url, str, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        topic: typing.Union[MetaOapg.properties.topic, str, schemas.Unset] = schemas.unset,
        tracking_fields: typing.Union['WebinarsGetDetailsResponseTrackingFields', schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        is_simulive: typing.Union[MetaOapg.properties.is_simulive, bool, schemas.Unset] = schemas.unset,
        record_file_id: typing.Union[MetaOapg.properties.record_file_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarsGetDetailsResponse':
        return super().__new__(
            cls,
            *args,
            host_email=host_email,
            host_id=host_id,
            id=id,
            uuid=uuid,
            agenda=agenda,
            created_at=created_at,
            duration=duration,
            join_url=join_url,
            occurrences=occurrences,
            password=password,
            encrypted_passcode=encrypted_passcode,
            h323_passcode=h323_passcode,
            recurrence=recurrence,
            settings=settings,
            start_time=start_time,
            start_url=start_url,
            timezone=timezone,
            topic=topic,
            tracking_fields=tracking_fields,
            type=type,
            is_simulive=is_simulive,
            record_file_id=record_file_id,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.webinars_get_details_response_occurrences import WebinarsGetDetailsResponseOccurrences
from zoom_meeting_python_sdk.model.webinars_get_details_response_recurrence import WebinarsGetDetailsResponseRecurrence
from zoom_meeting_python_sdk.model.webinars_get_details_response_settings import WebinarsGetDetailsResponseSettings
from zoom_meeting_python_sdk.model.webinars_get_details_response_tracking_fields import WebinarsGetDetailsResponseTrackingFields
