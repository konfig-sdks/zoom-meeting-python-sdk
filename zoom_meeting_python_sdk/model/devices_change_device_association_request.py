# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class DevicesChangeDeviceAssociationRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "action",
        }
        
        class properties:
            room_id = schemas.StrSchema
            
            
            class app_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ZR": "ZR",
                        "ZRC": "ZRC",
                        "ZRP": "ZRP",
                        "ZRW": "ZRW",
                    }
                
                @schemas.classproperty
                def ZR(cls):
                    return cls("ZR")
                
                @schemas.classproperty
                def ZRC(cls):
                    return cls("ZRC")
                
                @schemas.classproperty
                def ZRP(cls):
                    return cls("ZRP")
                
                @schemas.classproperty
                def ZRW(cls):
                    return cls("ZRW")
            __annotations__ = {
                "room_id": room_id,
                "app_type": app_type,
            }
    
    action: schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["room_id"]) -> MetaOapg.properties.room_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_type"]) -> MetaOapg.properties.app_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["room_id", "app_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["room_id"]) -> typing.Union[MetaOapg.properties.room_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_type"]) -> typing.Union[MetaOapg.properties.app_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["room_id", "app_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        room_id: typing.Union[MetaOapg.properties.room_id, str, schemas.Unset] = schemas.unset,
        app_type: typing.Union[MetaOapg.properties.app_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DevicesChangeDeviceAssociationRequest':
        return super().__new__(
            cls,
            *args,
            room_id=room_id,
            app_type=app_type,
            _configuration=_configuration,
            **kwargs,
        )
