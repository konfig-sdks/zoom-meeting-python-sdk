# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class AnalyticsSummaryResponseAnalyticsSummary(
    schemas.ListSchema
):
    """NOTE:
    This class is auto generated by Konfig (https://konfigthis.com)

    Analytics Summary.
    """


    class MetaOapg:
        
        
        class items(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    date = schemas.StrSchema
                    views_total_count = schemas.IntSchema
                    downloads_total_count = schemas.IntSchema
                    __annotations__ = {
                        "date": date,
                        "views_total_count": views_total_count,
                        "downloads_total_count": downloads_total_count,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["views_total_count"]) -> MetaOapg.properties.views_total_count: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["downloads_total_count"]) -> MetaOapg.properties.downloads_total_count: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["date", "views_total_count", "downloads_total_count", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["views_total_count"]) -> typing.Union[MetaOapg.properties.views_total_count, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["downloads_total_count"]) -> typing.Union[MetaOapg.properties.downloads_total_count, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date", "views_total_count", "downloads_total_count", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
                views_total_count: typing.Union[MetaOapg.properties.views_total_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                downloads_total_count: typing.Union[MetaOapg.properties.downloads_total_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    date=date,
                    views_total_count=views_total_count,
                    downloads_total_count=downloads_total_count,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AnalyticsSummaryResponseAnalyticsSummary':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
