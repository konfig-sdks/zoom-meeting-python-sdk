# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class MeetingsControlInMeetingFeaturesRequestParams(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The in-meeting parameters.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def contacts() -> typing.Type['MeetingsControlInMeetingFeaturesRequestParamsContacts']:
                return MeetingsControlInMeetingFeaturesRequestParamsContacts
            invitee_name = schemas.StrSchema
            phone_number = schemas.StrSchema
        
            @staticmethod
            def invite_options() -> typing.Type['MeetingsControlInMeetingFeaturesRequestParamsInviteOptions']:
                return MeetingsControlInMeetingFeaturesRequestParamsInviteOptions
            call_type = schemas.StrSchema
            device_ip = schemas.StrSchema
        
            @staticmethod
            def h323_headers() -> typing.Type['MeetingsControlInMeetingFeaturesRequestParamsH323Headers']:
                return MeetingsControlInMeetingFeaturesRequestParamsH323Headers
        
            @staticmethod
            def sip_headers() -> typing.Type['MeetingsControlInMeetingFeaturesRequestParamsSipHeaders']:
                return MeetingsControlInMeetingFeaturesRequestParamsSipHeaders
            __annotations__ = {
                "contacts": contacts,
                "invitee_name": invitee_name,
                "phone_number": phone_number,
                "invite_options": invite_options,
                "call_type": call_type,
                "device_ip": device_ip,
                "h323_headers": h323_headers,
                "sip_headers": sip_headers,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contacts"]) -> 'MeetingsControlInMeetingFeaturesRequestParamsContacts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invitee_name"]) -> MetaOapg.properties.invitee_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_number"]) -> MetaOapg.properties.phone_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invite_options"]) -> 'MeetingsControlInMeetingFeaturesRequestParamsInviteOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["call_type"]) -> MetaOapg.properties.call_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_ip"]) -> MetaOapg.properties.device_ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["h323_headers"]) -> 'MeetingsControlInMeetingFeaturesRequestParamsH323Headers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sip_headers"]) -> 'MeetingsControlInMeetingFeaturesRequestParamsSipHeaders': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contacts", "invitee_name", "phone_number", "invite_options", "call_type", "device_ip", "h323_headers", "sip_headers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contacts"]) -> typing.Union['MeetingsControlInMeetingFeaturesRequestParamsContacts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invitee_name"]) -> typing.Union[MetaOapg.properties.invitee_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_number"]) -> typing.Union[MetaOapg.properties.phone_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invite_options"]) -> typing.Union['MeetingsControlInMeetingFeaturesRequestParamsInviteOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["call_type"]) -> typing.Union[MetaOapg.properties.call_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_ip"]) -> typing.Union[MetaOapg.properties.device_ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["h323_headers"]) -> typing.Union['MeetingsControlInMeetingFeaturesRequestParamsH323Headers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sip_headers"]) -> typing.Union['MeetingsControlInMeetingFeaturesRequestParamsSipHeaders', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contacts", "invitee_name", "phone_number", "invite_options", "call_type", "device_ip", "h323_headers", "sip_headers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contacts: typing.Union['MeetingsControlInMeetingFeaturesRequestParamsContacts', schemas.Unset] = schemas.unset,
        invitee_name: typing.Union[MetaOapg.properties.invitee_name, str, schemas.Unset] = schemas.unset,
        phone_number: typing.Union[MetaOapg.properties.phone_number, str, schemas.Unset] = schemas.unset,
        invite_options: typing.Union['MeetingsControlInMeetingFeaturesRequestParamsInviteOptions', schemas.Unset] = schemas.unset,
        call_type: typing.Union[MetaOapg.properties.call_type, str, schemas.Unset] = schemas.unset,
        device_ip: typing.Union[MetaOapg.properties.device_ip, str, schemas.Unset] = schemas.unset,
        h323_headers: typing.Union['MeetingsControlInMeetingFeaturesRequestParamsH323Headers', schemas.Unset] = schemas.unset,
        sip_headers: typing.Union['MeetingsControlInMeetingFeaturesRequestParamsSipHeaders', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MeetingsControlInMeetingFeaturesRequestParams':
        return super().__new__(
            cls,
            *args,
            contacts=contacts,
            invitee_name=invitee_name,
            phone_number=phone_number,
            invite_options=invite_options,
            call_type=call_type,
            device_ip=device_ip,
            h323_headers=h323_headers,
            sip_headers=sip_headers,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.meetings_control_in_meeting_features_request_params_contacts import MeetingsControlInMeetingFeaturesRequestParamsContacts
from zoom_meeting_python_sdk.model.meetings_control_in_meeting_features_request_params_h323_headers import MeetingsControlInMeetingFeaturesRequestParamsH323Headers
from zoom_meeting_python_sdk.model.meetings_control_in_meeting_features_request_params_invite_options import MeetingsControlInMeetingFeaturesRequestParamsInviteOptions
from zoom_meeting_python_sdk.model.meetings_control_in_meeting_features_request_params_sip_headers import MeetingsControlInMeetingFeaturesRequestParamsSipHeaders
