# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class MeetingsBatchRegistrantsCreateResponseRegistrantsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            email = schemas.StrSchema
            join_url = schemas.StrSchema
            registrant_id = schemas.StrSchema
            participant_pin_code = schemas.Int64Schema
            __annotations__ = {
                "email": email,
                "join_url": join_url,
                "registrant_id": registrant_id,
                "participant_pin_code": participant_pin_code,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["join_url"]) -> MetaOapg.properties.join_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrant_id"]) -> MetaOapg.properties.registrant_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["participant_pin_code"]) -> MetaOapg.properties.participant_pin_code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "join_url", "registrant_id", "participant_pin_code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["join_url"]) -> typing.Union[MetaOapg.properties.join_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrant_id"]) -> typing.Union[MetaOapg.properties.registrant_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["participant_pin_code"]) -> typing.Union[MetaOapg.properties.participant_pin_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "join_url", "registrant_id", "participant_pin_code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        join_url: typing.Union[MetaOapg.properties.join_url, str, schemas.Unset] = schemas.unset,
        registrant_id: typing.Union[MetaOapg.properties.registrant_id, str, schemas.Unset] = schemas.unset,
        participant_pin_code: typing.Union[MetaOapg.properties.participant_pin_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MeetingsBatchRegistrantsCreateResponseRegistrantsItem':
        return super().__new__(
            cls,
            *args,
            email=email,
            join_url=join_url,
            registrant_id=registrant_id,
            participant_pin_code=participant_pin_code,
            _configuration=_configuration,
            **kwargs,
        )
