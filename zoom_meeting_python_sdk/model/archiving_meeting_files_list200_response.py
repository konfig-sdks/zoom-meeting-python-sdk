# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class ArchivingMeetingFilesList200Response(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "timezone",
            "total_size",
            "meeting_type",
            "recording_count",
            "is_breakout_room",
            "type",
            "uuid",
            "host_id",
            "duration",
            "start_time",
            "complete_time",
            "account_name",
            "topic",
            "id",
            "duration_in_second",
            "archive_files",
            "status",
        }
        
        class properties:
            account_name = schemas.StrSchema
        
            @staticmethod
            def archive_files() -> typing.Type['ArchivingMeetingFilesList200ResponseArchiveFiles']:
                return ArchivingMeetingFilesList200ResponseArchiveFiles
            
            
            class complete_time(
                schemas.ComposedBase,
                schemas.DateTimeSchema
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    
                    
                    class any_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'any_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class any_of_1(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "": "EMPTY",
                            }
                        
                        @schemas.classproperty
                        def EMPTY(cls):
                            return cls("")
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'complete_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            duration = schemas.IntSchema
            duration_in_second = schemas.IntSchema
            host_id = schemas.StrSchema
            id = schemas.Int64Schema
            is_breakout_room = schemas.BoolSchema
            
            
            class meeting_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "internal": "INTERNAL",
                        "external": "EXTERNAL",
                    }
                
                @schemas.classproperty
                def INTERNAL(cls):
                    return cls("internal")
                
                @schemas.classproperty
                def EXTERNAL(cls):
                    return cls("external")
            recording_count = schemas.IntSchema
            start_time = schemas.DateTimeSchema
            timezone = schemas.StrSchema
            topic = schemas.StrSchema
            total_size = schemas.IntSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        1: "POSITIVE_1",
                        2: "POSITIVE_2",
                        3: "POSITIVE_3",
                        4: "POSITIVE_4",
                        5: "POSITIVE_5",
                        6: "POSITIVE_6",
                        7: "POSITIVE_7",
                        8: "POSITIVE_8",
                        9: "POSITIVE_9",
                        100: "POSITIVE_100",
                    }
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls(5)
                
                @schemas.classproperty
                def POSITIVE_6(cls):
                    return cls(6)
                
                @schemas.classproperty
                def POSITIVE_7(cls):
                    return cls(7)
                
                @schemas.classproperty
                def POSITIVE_8(cls):
                    return cls(8)
                
                @schemas.classproperty
                def POSITIVE_9(cls):
                    return cls(9)
                
                @schemas.classproperty
                def POSITIVE_100(cls):
                    return cls(100)
            uuid = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "completed": "COMPLETED",
                        "processing": "PROCESSING",
                    }
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("completed")
                
                @schemas.classproperty
                def PROCESSING(cls):
                    return cls("processing")
            parent_meeting_id = schemas.StrSchema
            group_id = schemas.StrSchema
            __annotations__ = {
                "account_name": account_name,
                "archive_files": archive_files,
                "complete_time": complete_time,
                "duration": duration,
                "duration_in_second": duration_in_second,
                "host_id": host_id,
                "id": id,
                "is_breakout_room": is_breakout_room,
                "meeting_type": meeting_type,
                "recording_count": recording_count,
                "start_time": start_time,
                "timezone": timezone,
                "topic": topic,
                "total_size": total_size,
                "type": type,
                "uuid": uuid,
                "status": status,
                "parent_meeting_id": parent_meeting_id,
                "group_id": group_id,
            }
    
    timezone: MetaOapg.properties.timezone
    total_size: MetaOapg.properties.total_size
    meeting_type: MetaOapg.properties.meeting_type
    recording_count: MetaOapg.properties.recording_count
    is_breakout_room: MetaOapg.properties.is_breakout_room
    type: MetaOapg.properties.type
    uuid: MetaOapg.properties.uuid
    host_id: MetaOapg.properties.host_id
    duration: MetaOapg.properties.duration
    start_time: MetaOapg.properties.start_time
    complete_time: MetaOapg.properties.complete_time
    account_name: MetaOapg.properties.account_name
    topic: MetaOapg.properties.topic
    id: MetaOapg.properties.id
    duration_in_second: MetaOapg.properties.duration_in_second
    archive_files: 'ArchivingMeetingFilesList200ResponseArchiveFiles'
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_name"]) -> MetaOapg.properties.account_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archive_files"]) -> 'ArchivingMeetingFilesList200ResponseArchiveFiles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complete_time"]) -> MetaOapg.properties.complete_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration_in_second"]) -> MetaOapg.properties.duration_in_second: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host_id"]) -> MetaOapg.properties.host_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_breakout_room"]) -> MetaOapg.properties.is_breakout_room: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meeting_type"]) -> MetaOapg.properties.meeting_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording_count"]) -> MetaOapg.properties.recording_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_size"]) -> MetaOapg.properties.total_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_meeting_id"]) -> MetaOapg.properties.parent_meeting_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_id"]) -> MetaOapg.properties.group_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_name", "archive_files", "complete_time", "duration", "duration_in_second", "host_id", "id", "is_breakout_room", "meeting_type", "recording_count", "start_time", "timezone", "topic", "total_size", "type", "uuid", "status", "parent_meeting_id", "group_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_name"]) -> MetaOapg.properties.account_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archive_files"]) -> 'ArchivingMeetingFilesList200ResponseArchiveFiles': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complete_time"]) -> MetaOapg.properties.complete_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration_in_second"]) -> MetaOapg.properties.duration_in_second: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host_id"]) -> MetaOapg.properties.host_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_breakout_room"]) -> MetaOapg.properties.is_breakout_room: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meeting_type"]) -> MetaOapg.properties.meeting_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording_count"]) -> MetaOapg.properties.recording_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_size"]) -> MetaOapg.properties.total_size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_meeting_id"]) -> typing.Union[MetaOapg.properties.parent_meeting_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_id"]) -> typing.Union[MetaOapg.properties.group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_name", "archive_files", "complete_time", "duration", "duration_in_second", "host_id", "id", "is_breakout_room", "meeting_type", "recording_count", "start_time", "timezone", "topic", "total_size", "type", "uuid", "status", "parent_meeting_id", "group_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        timezone: typing.Union[MetaOapg.properties.timezone, str, ],
        total_size: typing.Union[MetaOapg.properties.total_size, decimal.Decimal, int, ],
        meeting_type: typing.Union[MetaOapg.properties.meeting_type, str, ],
        recording_count: typing.Union[MetaOapg.properties.recording_count, decimal.Decimal, int, ],
        is_breakout_room: typing.Union[MetaOapg.properties.is_breakout_room, bool, ],
        type: typing.Union[MetaOapg.properties.type, decimal.Decimal, int, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, ],
        host_id: typing.Union[MetaOapg.properties.host_id, str, ],
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, ],
        start_time: typing.Union[MetaOapg.properties.start_time, str, datetime, ],
        complete_time: typing.Union[MetaOapg.properties.complete_time, str, datetime, ],
        account_name: typing.Union[MetaOapg.properties.account_name, str, ],
        topic: typing.Union[MetaOapg.properties.topic, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        duration_in_second: typing.Union[MetaOapg.properties.duration_in_second, decimal.Decimal, int, ],
        archive_files: 'ArchivingMeetingFilesList200ResponseArchiveFiles',
        status: typing.Union[MetaOapg.properties.status, str, ],
        parent_meeting_id: typing.Union[MetaOapg.properties.parent_meeting_id, str, schemas.Unset] = schemas.unset,
        group_id: typing.Union[MetaOapg.properties.group_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ArchivingMeetingFilesList200Response':
        return super().__new__(
            cls,
            *args,
            timezone=timezone,
            total_size=total_size,
            meeting_type=meeting_type,
            recording_count=recording_count,
            is_breakout_room=is_breakout_room,
            type=type,
            uuid=uuid,
            host_id=host_id,
            duration=duration,
            start_time=start_time,
            complete_time=complete_time,
            account_name=account_name,
            topic=topic,
            id=id,
            duration_in_second=duration_in_second,
            archive_files=archive_files,
            status=status,
            parent_meeting_id=parent_meeting_id,
            group_id=group_id,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.archiving_meeting_files_list200_response_archive_files import ArchivingMeetingFilesList200ResponseArchiveFiles
