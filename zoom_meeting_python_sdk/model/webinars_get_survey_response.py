# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class WebinarsGetSurveyResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about the webinar survey.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def custom_survey() -> typing.Type['WebinarsGetSurveyResponseCustomSurvey']:
                return WebinarsGetSurveyResponseCustomSurvey
            show_in_the_browser = schemas.BoolSchema
            show_in_the_follow_up_email = schemas.BoolSchema
            
            
            class third_party_survey(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 64
            __annotations__ = {
                "custom_survey": custom_survey,
                "show_in_the_browser": show_in_the_browser,
                "show_in_the_follow_up_email": show_in_the_follow_up_email,
                "third_party_survey": third_party_survey,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_survey"]) -> 'WebinarsGetSurveyResponseCustomSurvey': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_in_the_browser"]) -> MetaOapg.properties.show_in_the_browser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_in_the_follow_up_email"]) -> MetaOapg.properties.show_in_the_follow_up_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["third_party_survey"]) -> MetaOapg.properties.third_party_survey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["custom_survey", "show_in_the_browser", "show_in_the_follow_up_email", "third_party_survey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_survey"]) -> typing.Union['WebinarsGetSurveyResponseCustomSurvey', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_in_the_browser"]) -> typing.Union[MetaOapg.properties.show_in_the_browser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_in_the_follow_up_email"]) -> typing.Union[MetaOapg.properties.show_in_the_follow_up_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["third_party_survey"]) -> typing.Union[MetaOapg.properties.third_party_survey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["custom_survey", "show_in_the_browser", "show_in_the_follow_up_email", "third_party_survey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        custom_survey: typing.Union['WebinarsGetSurveyResponseCustomSurvey', schemas.Unset] = schemas.unset,
        show_in_the_browser: typing.Union[MetaOapg.properties.show_in_the_browser, bool, schemas.Unset] = schemas.unset,
        show_in_the_follow_up_email: typing.Union[MetaOapg.properties.show_in_the_follow_up_email, bool, schemas.Unset] = schemas.unset,
        third_party_survey: typing.Union[MetaOapg.properties.third_party_survey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarsGetSurveyResponse':
        return super().__new__(
            cls,
            *args,
            custom_survey=custom_survey,
            show_in_the_browser=show_in_the_browser,
            show_in_the_follow_up_email=show_in_the_follow_up_email,
            third_party_survey=third_party_survey,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.webinars_get_survey_response_custom_survey import WebinarsGetSurveyResponseCustomSurvey
