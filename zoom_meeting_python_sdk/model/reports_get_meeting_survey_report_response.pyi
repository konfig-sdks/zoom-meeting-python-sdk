# coding: utf-8

"""
    Zoom Meeting API

    The Zoom Meeting APIs let developers to access information from Zoom. 

    The version of the OpenAPI document: 2
    Created by: https://developer.zoom.us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zoom_meeting_python_sdk import schemas  # noqa: F401


class ReportsGetMeetingSurveyReportResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            meeting_id = schemas.Int64Schema
            meeting_uuid = schemas.StrSchema
            start_time = schemas.DateTimeSchema
            survey_id = schemas.StrSchema
            survey_name = schemas.StrSchema
        
            @staticmethod
            def survey_answers() -> typing.Type['ReportsGetMeetingSurveyReportResponseSurveyAnswers']:
                return ReportsGetMeetingSurveyReportResponseSurveyAnswers
            __annotations__ = {
                "meeting_id": meeting_id,
                "meeting_uuid": meeting_uuid,
                "start_time": start_time,
                "survey_id": survey_id,
                "survey_name": survey_name,
                "survey_answers": survey_answers,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meeting_id"]) -> MetaOapg.properties.meeting_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meeting_uuid"]) -> MetaOapg.properties.meeting_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["survey_id"]) -> MetaOapg.properties.survey_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["survey_name"]) -> MetaOapg.properties.survey_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["survey_answers"]) -> 'ReportsGetMeetingSurveyReportResponseSurveyAnswers': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["meeting_id", "meeting_uuid", "start_time", "survey_id", "survey_name", "survey_answers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meeting_id"]) -> typing.Union[MetaOapg.properties.meeting_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meeting_uuid"]) -> typing.Union[MetaOapg.properties.meeting_uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["survey_id"]) -> typing.Union[MetaOapg.properties.survey_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["survey_name"]) -> typing.Union[MetaOapg.properties.survey_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["survey_answers"]) -> typing.Union['ReportsGetMeetingSurveyReportResponseSurveyAnswers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["meeting_id", "meeting_uuid", "start_time", "survey_id", "survey_name", "survey_answers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        meeting_id: typing.Union[MetaOapg.properties.meeting_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        meeting_uuid: typing.Union[MetaOapg.properties.meeting_uuid, str, schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, str, datetime, schemas.Unset] = schemas.unset,
        survey_id: typing.Union[MetaOapg.properties.survey_id, str, schemas.Unset] = schemas.unset,
        survey_name: typing.Union[MetaOapg.properties.survey_name, str, schemas.Unset] = schemas.unset,
        survey_answers: typing.Union['ReportsGetMeetingSurveyReportResponseSurveyAnswers', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportsGetMeetingSurveyReportResponse':
        return super().__new__(
            cls,
            *args,
            meeting_id=meeting_id,
            meeting_uuid=meeting_uuid,
            start_time=start_time,
            survey_id=survey_id,
            survey_name=survey_name,
            survey_answers=survey_answers,
            _configuration=_configuration,
            **kwargs,
        )

from zoom_meeting_python_sdk.model.reports_get_meeting_survey_report_response_survey_answers import ReportsGetMeetingSurveyReportResponseSurveyAnswers
